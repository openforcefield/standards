{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"OpenFF Standards","text":"<p>This page provides an overview of the different standards employed accross the OpenFF ecosystem. Specifically, it  contains standards documents which encompass both the specification of core data models and formats and standard  operating procedures, as well as OpenFF Enhancement Proposals (OFF-EPs)\u2014suggested changes to the standards\u2014in various  stages of discussion or completion.</p>"},{"location":"#standards","title":"Standards","text":""},{"location":"#data-models","title":"Data Models","text":"<ul> <li>SMIRNOFF Specification - the SMIRNOFF specification defines the format that molecular    mechanics force fields from the Open Force Field Initiative are store and distributed in.</li> </ul>"},{"location":"#procedures","title":"Procedures","text":"<ul> <li>QM Data Set Submission - the standards and data requirements needed for submitting    an OpenFF curated dataset to QCArchive.</li> </ul>"},{"location":"#enhancement-proposals","title":"Enhancement Proposals","text":""},{"location":"#meta-proposals","title":"Meta-Proposals","text":"<ul> <li>OFF-EP 0 \u2014 Purpose and Process</li> <li>OFF-EP X \u2014 Template</li> </ul>"},{"location":"#accepted-proposals","title":"Accepted Proposals","text":"<ul> <li>OFF-EP 1 \u2014 Clarify that constraint distances override equilibrium bond distances</li> <li>OFF-EP 5 \u2014 Resolve ambiguity over PME electrostatics for nonperiodic systems</li> <li>OFF-EP 6 \u2014 Define virtual site exclusion policy</li> <li>OFF-EP 8 \u2014 Specifying different vdW methods for periodic and non-periodic systems and allow \"no-cutoff\" vdW interactions</li> <li>OFF-EP 9 \u2014 Add LJPME</li> <li>OFF-EP 10 \u2014 Clarify ProperTorsion implementation of idivf and dihedral calculation</li> </ul>"},{"location":"#open-proposals","title":"Open Proposals","text":"<ul> <li>OFF-EP XX \u2014 GNN Charges</li> </ul>"},{"location":"#final-proposals","title":"Final Proposals","text":""},{"location":"#rejected-proposals","title":"Rejected Proposals","text":""},{"location":"#deferred-proposals","title":"Deferred Proposals","text":""},{"location":"enhancement-proposals/off-ep-0000/","title":"OFF-EP 0 \u2014 Purpose and Process","text":"<p>Status: Accepted</p> <p>Authors: Simon Boothroyd</p> <p>Acceptance criteria: Unanimity</p> <p>Stakeholders: Karmen Condic-Jurkic, Jeffrey Wagner, David Mobley, John Chodera</p> <p>Created: 2020-04-01</p> <p>Discussion: Issue #741</p> <p>Implementation: <code>openff-standards</code></p>"},{"location":"enhancement-proposals/off-ep-0000/#what-is-an-off-ep","title":"What is an OFF-EP?","text":"<p>OFF-EPs (OpenFF Enhancement Proposals) are the mechanism by which the standards employed across the Open Force Field ecosystem are drafted, accepted and updated. OFF-EPs cover both technical and procedural standards, example of which include:</p> <ul> <li>the specification of core data models, such the <code>Molecule</code>, <code>Topology</code> and    <code>System</code> models.</li> <li>the SMIRNOFF force field specification.</li> <li>the standard operating procedure for curating and adopting data sets, such as the    QCA Standards.</li> </ul> <p>Each OFF-EP should clearly and concisely outline what new standard is being introduced or updated, and most importantly, provide a rationale for the change and get input from relevant stakeholders.</p> <p>Because the OFF-EPs are maintained as text files in a versioned repository, their revision history is the historical record of the standards proposal.</p>"},{"location":"enhancement-proposals/off-ep-0000/#types","title":"Types","text":"<p>There are three kinds of OFF-EPs:</p> <ol> <li>Standards Track OFF-EPs describe a new feature or implementation</li> <li>Informational OFF-EPs provide general, non-binding guidance to the community but do not propose a new feature.</li> <li>Process OFF-EPs describe a change that may not be technical in nature but requires community input.</li> </ol>"},{"location":"enhancement-proposals/off-ep-0000/#workflow","title":"Workflow","text":"<p>The OFF-EP process begins with a new idea for Open Force Field infrastructure and/or community. It is highly recommended that a single OFF-EP contain a single key proposal or new idea with a concise scope. Small changes often do not need to go through the OFF-EP process and can be submitted directly to as either a question to the community or a software patch. Each OFF-EP must have a champion -- someone who writes the proposal using the template provded below, shepherds the discussions in the appropriate forums, and attempts to build community consensus around the proposal.</p>"},{"location":"enhancement-proposals/off-ep-0000/#submission","title":"Submission","text":"<p>Once a proposal is written, this draft should be submitted as a pull request to the openforcefield/standards repository with the status set to <code>Proposed</code>. It shall be merged at the earliest convenience of maintainers (note that this merge does not imply acceptance, as its status shall still be <code>Proposed</code>). At this point, members of the Open Force Field community will review the submission.</p>"},{"location":"enhancement-proposals/off-ep-0000/#review-and-resolution","title":"Review and Resolution","text":"<p>All OFF-EPs will be resolved as either Rejected, Accepted or Deferred</p> <p>An OFF-EP is accepted upon approval by at least three of @SimonBoothroyd, @j-wags, @karmencj, @davidlmobley, and  @jchodera. </p> <p>When an OFF-EP is accepted, it status shall be marked <code>Accepted</code>.</p> <p>If an OFF-EP is not accepted and the community considers it unlikely to be accepted in the future, it can be rejected and its status shall be marked <code>Rejected</code>. If an OFF-EP is not accepted and the community considers it plausible to be accepted in the future, possibly in a different form, the authors can withdraw it and its status shall be marked <code>Deferred</code>.</p>"},{"location":"enhancement-proposals/off-ep-0000/#format","title":"Format","text":"<p>OFF-EPs are UTF-8 encoded text files using the Markdown format. A template is provided in the file <code>off-ep-template.md</code>.</p>"},{"location":"enhancement-proposals/off-ep-0000/#copyright","title":"Copyright","text":"<p>This document is based based upon the <code>NEP 0</code>,  <code>CFEP 01</code>, and <code>PEP 1</code></p> <p>This document is explicitly CC0 1.0 Universal.</p>"},{"location":"enhancement-proposals/off-ep-0001/","title":"OFF-EP 1 \u2014 Clarify that constraint distances override equilibrium bond distances","text":"<p>Status: Accepted</p> <p>Authors: Matt Thompson, matt.thompson@openforcefield.org</p> <p>Stakeholders: David Mobley, John Chodera, Jeffrey Wagner, Simon Boothroyd</p> <p>Acceptance criteria: Unanimity</p> <p>Created: 2021-11-23</p> <p>Discussion: Issue #5</p> <p>Implementation: PR #21</p>"},{"location":"enhancement-proposals/off-ep-0001/#abstract","title":"Abstract","text":"<p>This OFF-EP improves the documentation of the constraints section.</p>"},{"location":"enhancement-proposals/off-ep-0001/#motivation-and-scope","title":"Motivation and Scope","text":"<p>Most sections of the SMIRNOFF specification can be applied independently of others, but the <code>&lt;Constraints&gt;</code> section depends on the <code>&lt;Bonds&gt;</code> section in many implementations. Specifically, a pair of atoms can be subject to a harmonic bond potential via a <code>&lt;Bond&gt;</code> parameter and also be constrained via a constraint specified by a <code>&lt;Constraint&gt;</code> parameter. This leads to two edge cases that are not explicitly described in the specification.</p> <p>The first case is in which each section specifies a distance parameter, which are likely not numerically identical, and it is not clear which should be applied. The current implementation in the OpenFF Toolkit uses the distance specified in the <code>&lt;Constraint&gt;</code> record.</p> <p>The second case is in which a <code>&lt;Constraint&gt;</code> record does not specify the distance, in which case the <code>length</code> value of a corresponding bond parameter is used. The current implementation in the OpenFF Toolkit uses the distance specified in the <code>&lt;Bond&gt;</code> record.</p> <p>These each could be minor points of confusion for anybody re-implementing the SMIRNOFF spec. At worst, these ambiguities could cause behavior differences between implementations.</p>"},{"location":"enhancement-proposals/off-ep-0001/#usage-and-impact","title":"Usage and Impact","text":"<p>There should be no impact on existing implementations as the only current implementation we are aware of already follows the behavior described by these changes.</p>"},{"location":"enhancement-proposals/off-ep-0001/#backward-compatibility","title":"Backward compatibility","text":"<p>This proposal does not change the behavior; it only makes explicit what is currently implicit in the specification and what is the current behavior of the implementation in the OpenFF Toolkit. Therefore, there should be no backwards compatibility issues.</p>"},{"location":"enhancement-proposals/off-ep-0001/#detailed-description","title":"Detailed description","text":"<p>This OFF-EP adds the following clarifications to the <code>&lt;Constraints&gt;</code> section of the SMIRNOFF specification:</p> <pre><code>If a constraint is applied across a bond between two atoms, then the length of that bond will be constrained to:\n\n* the value of the `distance` attribute of the `&lt;Constraint&gt;` parameter _if one is specified_, *otherwise*\n* the value of the `length` attribute of the `&lt;Bond&gt;` parameter that is matched by that bond\n\nIf the `&lt;Constraint/&gt;` parameter does not specify a distance and is applied to two atoms that either aren't bonded or which do not have an associated `&lt;Bond/&gt;` parameter, an exception should be raised.\n</code></pre>"},{"location":"enhancement-proposals/off-ep-0001/#discussion","title":"Discussion","text":"<ul> <li>Issue #5</li> </ul>"},{"location":"enhancement-proposals/off-ep-0001/#copyright","title":"Copyright","text":"<p>All OFF-EPs are explicitly CC0 1.0 Universal.</p>"},{"location":"enhancement-proposals/off-ep-0005/","title":"OFF-EP 0005 \u2014 Allow different electrostatics methods to be used on period and non-periodic systems","text":"<p>Status: Accepted</p> <p>Authors: Matt Thompson and John Chodera, Jeffrey Wagner, Simon Boothroyd</p> <p>Stakeholders: Simon Boothroyd, Jeffrey Wagner, David Mobley, John Chodera</p> <p>Acceptance criteria: Unanimity</p> <p>Created: 2020-03-15</p> <p>Discussion: Issue #29</p> <p>Implementation: <code>openff-standards</code></p>"},{"location":"enhancement-proposals/off-ep-0005/#abstract","title":"Abstract","text":"<p>This change refines the way the <code>&lt;Electrostatics&gt;</code> tag defines behavior in periodic (i.e., condensed-phase) and non-periodic (i.e., gas phase) systems to clarify the intended true electrostatics models in each case. Implementations are permitted to make approximations to these specified models---e.g. Particle-Mesh Ewald (PME)--- as a controlled approximation to Ewald provided the approximation accuracy is controlled.</p>"},{"location":"enhancement-proposals/off-ep-0005/#motivation-and-scope","title":"Motivation and Scope","text":"<p>In version 0.3 of the <code>&lt;Electrostatics&gt;</code> tag, the default electrostatics method is <code>method=\"PME\"</code>, with <code>reaction-field</code> also a permitted choice.</p> <p>These definitions present several issues that this OFF-EP attempts to solve:</p> <ul> <li><code>PME</code> is intended to be a permissible approximation to the true electrostatics model, Ewald</li> <li>The boundary conditions (e.g. dielectric at infinity) for the Ewald sum are not specified</li> <li>The Ewald method is only intended for periodic systems; unmodified vacuum electrostatics are intended for non-periodic systems</li> <li>The treatment of intramolecular electrostatics exceptions is unspecified</li> <li>The choice <code>reaction-field</code> does not uniquely specify the functional form for the true reaction-field model intended; many variants are available</li> <li>The solvent dielectric constant was not specified.</li> <li>Cutoffs were not specified</li> <li>The physical constants used to compute the potential were unspecified</li> </ul> <p>To solve these issues, this OFF-EP proposes:</p> <ul> <li>The <code>method</code> attribute is replaced with <code>periodic_potential</code> in analogy to other parameters that use the <code>potential</code> term to specify the functional form or a common choice</li> <li>The <code>periodic_potential</code> attribute defaults to <code>Ewald3D-ConductingBoundary</code> as a valid keyword that states that the Ewald periodic sum with conducting boundary conditions should be the true potential used for periodic systems</li> <li>PME (and other methods) are permissible approximations to Ewald as long as they are controlled.</li> <li>For reaction field or other methods, the <code>periodic_potential</code> can specify the exact functional form used for the periodic potential or a keyword denoting a common choice, along with the optional <code>cutoff</code> and <code>solvent_dielectric</code> attributes</li> <li>The <code>nonperiodic_potential</code> attribute defaults to <code>Coulomb</code> indicating the Coulomb potential is to be used in non-periodic systems, though other functional forms are accepted.</li> <li>The <code>exception_potential</code> attribute defaults to <code>Coulomb</code>, indicating the Coulomb potential is to be used for exceptions, though other functional forms are accepted.</li> <li>We explicitly specify which self-consistent physical constants should be used.</li> </ul>"},{"location":"enhancement-proposals/off-ep-0005/#usage-and-impact","title":"Usage and Impact","text":"<p>Since most force fields use some flavor of PME for periodic systems and something similar to <code>nonperiodic_potential=\"Coulomb\"</code> for non-periodic systems, the default attributes for this tag will likely be the most commonly-used. Splitting <code>method</code> out into explicit attributes to specify periodic, nonperiodic, and exception potential energy terms, however, makes it less ambiguous how electrostatics should be handled in each case and decouples the method used in each case.</p> <p>Users are recommended to consider upgrading from the default attribute values of 0.3 to 0.4 to avoid continuing to use this ambiguity. Implementations may wish to execute this up-conversion automatically (see below).</p> <p>If backward-compatibility is provided as specified below, users of old force fields will not need to update their force field definitions.</p>"},{"location":"enhancement-proposals/off-ep-0005/#backward-compatibility","title":"Backward compatibility","text":"<p>Implementations may wish to add up-converters from old versions. An up-converter could convert the following tag header</p> <pre><code>&lt;Electrostatics version=\"0.3\" method=\"PME\" scale12=\"0.0\" scale13=\"0.0\" scale14=\"0.833333\" scale15=\"1.0\"/&gt;\n</code></pre> <p>to a header using version 0.4, which for this case could be</p> <pre><code>&lt;Electrostatics version=\"0.4\" periodic_potential=\"Ewald3D-ConductingBoundary\" nonperiodic_potential=\"Coulomb\" exception_potential=\"Coulomb\" scale12=\"0.0\" scale13=\"0.0\" scale14=\"0.833333\" scale15=\"1.0\"/&gt;\n</code></pre> <p>Concretely, the following conversions should be performed:</p> 0.3 <code>method</code> 0.4 <code>periodic_potential</code> 0.4 <code>nonperiodic_potential</code> 0.4 <code>exception_potential</code> <code>PME</code> <code>Ewald3D-ConductingBoundary</code> <code>Coulomb</code> <code>Coulomb</code> <code>reaction-field</code> <code>charge1*charge2/(4*pi*epsilon0)*(1/r + k_rf*r^2 - c_rf); k_rf=(cutoff^(-3))*(solvent_dielectric-1)/(2*solvent_dielectric+1); c_rf=cutoff^(-1)*(3*solvent_dielectric)/(2*solvent_dielectric+1)</code> <code>Coulomb</code> <code>Coulomb</code> <code>Coulomb</code> <code>Ewald3D-ConductingBoundary</code> <code>Coulomb</code> <code>Coulomb</code> <p>If the 0.3 section's <code>method</code> does not actually involve the use of a <code>cutoff</code> or <code>switch_width</code> (such as is the case if <code>method=\"PME\"</code>), those values may be set to their defaults in the 0.4 <code>Electrostatics</code> section.</p> <p>The value of the 0.4 <code>Electrostatics</code> section's <code>solvent_dielectric</code> should be set to <code>none</code>.</p>"},{"location":"enhancement-proposals/off-ep-0005/#detailed-description","title":"Detailed description","text":""},{"location":"enhancement-proposals/off-ep-0005/#in-the-general-smirnoff-spec-description","title":"In the general SMIRNOFF spec description","text":"<p>A section is added stating that CODATA 2018 physical constants are used in all released SMIRNOFF versions to date. Future OFF-EPs may migrate the specification of which self-consistent physical constants are used to a higher-level attribute.</p>"},{"location":"enhancement-proposals/off-ep-0005/#in-the-electrostatics-section","title":"In the <code>Electrostatics</code> section","text":"<p>The <code>method</code> tag attribute is removed and replaced with <code>periodic_potential</code>, <code>nonperiodic_potential</code>, and <code>exception_potential</code>.</p> <p>The optional <code>solvent_dielectric</code> tag attribute is added to specify the solvent dielectric used with finite-ranged potentials, defaulting to <code>none</code>.</p> <p>For <code>periodic_potential</code>:</p> <ul> <li><code>Ewald3D-ConductingBoundary</code> (default) denotes that the Ewald potential with conducting (dielectric 0) boundary conditions are used</li> <li>A function denotes that the specified function should be used, which may make use of <code>cutoff</code>, <code>switch_width</code>, and/or <code>solvent_dielectric</code> terms</li> <li>Future OFF-EPs may add specific keywords for common choices of reaction field electrostatics</li> </ul> <p>For <code>nonperiodic_potential</code>:</p> <ul> <li><code>Coulomb</code> (default) denotes that the standard Coulomb potential should be used with no cutoff or reaction-field attenuation</li> <li>A function denotes that the specified function should be used, which may make use of <code>cutoff</code>, <code>switch_width</code>, and/or <code>solvent_dielectric</code> terms</li> </ul> <p>For <code>exception_potential</code>:</p> <ul> <li><code>Coulomb</code> (default) denotes that the standard Coulomb potential should be used with no cutoff or reaction-field attenuation</li> <li>A function denotes that the specified function should be used, which may make use of <code>cutoff</code>, <code>switch_width</code>, and/or <code>solvent_dielectric</code> terms</li> </ul>"},{"location":"enhancement-proposals/off-ep-0005/#examples","title":"Examples","text":"<p>Ewald electrostatics (permitting PME to be used) are used for periodic systems; Coulomb used for non-periodic:</p> <pre><code>&lt;Electrostatics version=\"0.4\" periodic_cutoff=\"None\" periodic_potential=\"Ewald3D-ConductingBoundary\" nonperiodic_potential=\"Coulomb\" exception_potential=\"Coulomb\" scale12=\"0.0\" scale13=\"0.0\" scale14=\"0.833333\" scale15=\"1.0\"/&gt;\n</code></pre> <p>Shifted reaction field electrostatics (e.g. from OpenMM) are used for periodic systems; Coulomb used for non-periodic:</p> <pre><code>&lt;Electrostatics version=\"0.4\" periodic_potential=\"charge1*charge2/(4*pi*epsilon0)*(1/r + k_rf*r^2 - c_rf); k_rf=(cutoff^(-3))*(solvent_dielectric-1)/(2*solvent_dielectric+1); c_rf=cutoff^(-1)*(3*solvent_dielectric)/(2*solvent_dielectric+1)\" solvent_dielectric=\"78.5\" periodic_cutoff=\"12*angstroms\" nonperiodic_potential=\"Coulomb\" exception_potential=\"Coulomb\" scale12=\"0.0\" scale13=\"0.0\" scale14=\"0.833333\" scale15=\"1.0\"/&gt;\n</code></pre>"},{"location":"enhancement-proposals/off-ep-0005/#alternatives","title":"Alternatives","text":"<p>See OFF-EP 0005.</p>"},{"location":"enhancement-proposals/off-ep-0005/#discussion","title":"Discussion","text":"<ul> <li>Toolkit #1084</li> <li>Standards #29</li> <li>Alternatives: OFF-EP 0005</li> </ul>"},{"location":"enhancement-proposals/off-ep-0005/#copyright","title":"Copyright","text":"<p>This template is based upon the OFF-EP template.</p> <p>This document is explicitly CC0 1.0 Universal.</p>"},{"location":"enhancement-proposals/off-ep-0006/","title":"OFF-EP 6 \u2014 Define virtual site exclusion policy","text":"<p>Status: Accepted</p> <p>Authors: Simon Boothroyd, simon.boothroyd@openforcefield.org</p> <p>Stakeholders: David Mobley, John Chodera, Jeffrey Wagner, Simon Boothroyd</p> <p>Acceptance criteria: Majority</p> <p>Created: 2022-04-05</p> <p>Discussion: PR #35</p> <p>Implementation: PR #35</p>"},{"location":"enhancement-proposals/off-ep-0006/#abstract","title":"Abstract","text":"<p>This OFF-EP aims to define the allowed virtual site exclusion policies, which are currently only listed without definition.</p>"},{"location":"enhancement-proposals/off-ep-0006/#motivation-and-scope","title":"Motivation and Scope","text":"<p>The virtual site section of the SMIRNOFF specification states that the top level <code>&lt;VirtualSites&gt;</code>parameter handler  allows an <code>exclusion_policy</code> to be defined, and the corresponding allowed values table (currently version 0.3) states  that the only allowed value is <code>parents</code>. The section does not however define what this means, nor does it address how  virtual site interactions are influenced by 1-N scale factors.</p>"},{"location":"enhancement-proposals/off-ep-0006/#usage-and-impact","title":"Usage and Impact","text":"<p>Usage of virtual sites is understood to be currently limited to internal users on the OpenFF scientific team, and  mostly only limited to TIP4P water which should likely not need exclusions. As such, the impact of changing  the definition of the exclusion policy, even to one that doesn't necessarily agree with the current reference  implementation in the OpenFF toolkit, should be minimal to none.</p>"},{"location":"enhancement-proposals/off-ep-0006/#backward-compatibility","title":"Backward compatibility","text":"<p>The proposed definition conflicts with the OpenFF Toolkit reference implementation of the  <code>parents</code> exclusion policy, that currently assumes:</p> <p>the user would want to exclude all non-bonded interactions between the virtual site and each 'parent atom' used to    define the virtual sites' orientation and does no interaction scaling using, for example, the vdW or electrostatics    <code>scale14</code> factor.</p> <p>This would mean that new versions of the reference implementation would yield different energies for molecules that contain greater than three atoms, and hence not be backwards compatible.</p> <p>To retain previous behaviour we could in principle incorporate the proposed definition as a new allowed exclusion  policy, <code>'inherit'</code>, however given the low (to zero) number of users this change would affect it is unclear that it is worth the extra maintenance burden, and is likely an acceptable break.</p>"},{"location":"enhancement-proposals/off-ep-0006/#detailed-description","title":"Detailed description","text":"<p>This OFF-EP proposes defining the <code>parents</code> virtual site exclusion policy to mean:</p> <p>virtual site particles should exclude non-bonded interactions with, or scale their interactions with, the same atoms  as the main 'parent atom' that they are attached to does. Which atom is the 'parent atom' depends on the type of virtual site: for <code>BondCharge</code>, <code>MonovalentLonePair</code>, <code>DivalentLonePair</code>, and <code>TrivalentLonePair</code> types, it is the  atom labelled <code>:1</code> in the SMIRKS pattern.</p> <p>As an example, if the parent atom is separated by two bonds from another atom i.e a 1-3 pair, the virtual sites' interaction with that other atom should also be treated as a 1-3 pair. Similarly, if the parent atom is separated by  three bonds from another atom i.e a 1-4 pair, the virtual sites' interaction with that other atom should also be  treated as a 1-4 pair and the interaction should be scaled by the appropriate <code>scale14</code> factor. </p>"},{"location":"enhancement-proposals/off-ep-0006/#alternatives","title":"Alternatives","text":"<ul> <li>Implement the proposed definition as a new allowed value as described in the backward compatibility    section. As mentioned however, it is not clear that the current <code>parents</code> implementation is broadly used, nor does it    take into account important settings such as 1-4 scaling factors, and hence it is likely justified to just overwrite   the reference.</li> </ul>"},{"location":"enhancement-proposals/off-ep-0006/#discussion","title":"Discussion","text":"<p>This preferred exclusion policy has been discussed by external collaborators previously, who have also settled on the same definition as is proposed here.</p>"},{"location":"enhancement-proposals/off-ep-0006/#copyright","title":"Copyright","text":"<p>This template is based upon the <code>numpy</code> NEP template and the <code>conda-forge</code> CFEP template.</p> <p>All OFF-EPs are explicitly CC0 1.0 Universal.</p>"},{"location":"enhancement-proposals/off-ep-0008/","title":"OFF-EP 0008 \u2014 Specifying different vdW methods for periodic and non-periodic systems and allow \"no-cutoff\" vdW interactions","text":"<p>Status: Draft</p> <p>Authors: Matt Thompson</p> <p>Stakeholders: All who have implemented a SMIRNOFF parser</p> <p>Acceptance criteria: Majority of SMIRNOFF committee</p> <p>Created: 2023-08-01</p> <p>Discussion: Issues #51 and #7</p> <p>Implementation: PR #53</p>"},{"location":"enhancement-proposals/off-ep-0008/#abstract","title":"Abstract","text":"<p>This OFF-EP splits the current <code>method</code> attribute in the vdW section into separate attributes for periodic and non-periodic systems. It also adds <code>\"no-cutoff\"</code> as a supported method.</p>"},{"location":"enhancement-proposals/off-ep-0008/#motivation-and-scope","title":"Motivation and Scope","text":"<p>The <code>method</code> attribute in the vdW section specifies what sort of cut-off scheme should be used, if any, for vdW interactions. It does this without consideration for whether or not the system is periodic. Conventionally, however, different schemes are used for periodic systems (cut-off interactions with various corrections) and non-periodic systems (no cut-off). This causes an issue for existing implementations, which favor the use of a \"no cut-off\" scheme for non-periodic systems despite not being a part of the SMIRNOFF specification.</p> <p>Additionally, the current specification implies that the only supported vdW method is <code>\"cutoff\"</code> and, by extension, that vdW interactions without a cut-off are not supported by SMIRNOFF despite its common use.</p>"},{"location":"enhancement-proposals/off-ep-0008/#usage-and-impact","title":"Usage and Impact","text":"<p>As these proposed changes bring the specification in line with existing implementations, such as how OpenFF software implements the SMIRNOFF specification, there should be no practical impact on existing workflows and simulations. Software that implements the SMIRNOFF specification will need to be updated to support new attributes. Additionally, developers may choose to implement an up-converter from older versions of the vdW section.</p>"},{"location":"enhancement-proposals/off-ep-0008/#backward-compatibility","title":"Backward compatibility","text":"<p>Because this change expands the information content of the vdW section and adds attributes that do not currently exist, it can be understood as strictly backwards-incompatible. However, most implementations do not strictly follow the specification in its current form and the proposed changes bring the specification in line with this implementation and community practices more broadly.</p>"},{"location":"enhancement-proposals/off-ep-0008/#detailed-description","title":"Detailed description","text":"<p>The vdW method section is updated to version 0.4.</p> <p>The <code>method</code> attribute is removed from the vdW section and replaced with two new attributes: <code>periodic_method</code> and <code>nonperiodic_method</code>. These encode the method that should be used for periodic and non-periodic systems, respectively.</p> <p>Either <code>periodic_method</code> or <code>nonperiodic_method</code> can take the following values:</p> <ul> <li><code>\"cutoff\"</code>: The vdW interaction is truncated at a distance specified by the <code>cutoff</code> attribute.</li> <li><code>\"no-cutoff\"</code>: The vdW interaction is not truncated.</li> </ul> <p>The default values, and the implied up-conversion from <code>method=\"cutoff\"</code> of version 0.3, are <code>periodic_method=\"cutoff\"</code> and <code>nonperiodic_method=\"no-cutoff\"</code>.</p> <p>Other attributes in the vdW section, such as <code>potential</code>, are not affected.</p>"},{"location":"enhancement-proposals/off-ep-0008/#alternatives","title":"Alternatives","text":"<p>The existing <code>method</code> section could remain but specify both periodic and non-periodic methods. The result would be something like <code>method=\"periodic=cutoff,non-periodic=no-cutoff\"</code>. This is unappealing, however, as it forces two details into one setting, is non-trivial to parse, and makes future extensions to the set of supported methods more difficult.</p>"},{"location":"enhancement-proposals/off-ep-0008/#discussion","title":"Discussion","text":"<ul> <li>Ambiguity with periodicity</li> <li>Lack of (explicit) support for non-cut-off interactions</li> <li>A similar change to the Electrostatics section was accepted in OFF-EP 0005</li> </ul>"},{"location":"enhancement-proposals/off-ep-0008/#copyright","title":"Copyright","text":"<p>This template is based upon the <code>numpy</code> NEP template and the <code>conda-forge</code> CFEP template.</p> <p>All OFF-EPs are explicitly CC0 1.0 Universal.</p>"},{"location":"enhancement-proposals/off-ep-0009/","title":"OFF-EP 0009 \u2014 Add LJPME","text":"<p>Status: Submitted</p> <p>Authors: Matt Thompson, John Chodera</p> <p>Acceptance criteria: Unanimity (4 approving reviews) or partial support (2 approvals and 2 week period with no reviews requesting changes)[https://openforcefield.atlassian.net/wiki/spaces/MEET/pages/2638774273/09-05-23+SMIRNOFF+Committee+Meeting]</p> <p>Stakeholders:</p> <p>Created: 2023-09-05</p> <p>Discussion: PR #40, PR #44, Issue #11, Toolkit issue #989, OFF-EP-0008</p> <p>Implementation: <code>openff-standards</code></p>"},{"location":"enhancement-proposals/off-ep-0009/#abstract","title":"Abstract","text":"<p>This change adds <code>periodic_method=\"Ewald3D\"</code> as a supported attribute value in the <code>&lt;vdW&gt;</code> tag.</p>"},{"location":"enhancement-proposals/off-ep-0009/#motivation-and-scope","title":"Motivation and Scope","text":"<p>There are compelling reasons for force fields to handle long-range vdW interactions with an Ewald sum (so-called LJPME, used here synonymously) analogously to how electrostatics are conventionally handled, despite the increased computational cost. While tail corrections largely mediate the errors introduced by cutting off vdW interactions before they naturally decay to zero, they do so imperfectly, particularly in nonisotropic systems. These differences, even if small, also imply that a force field fitted with cut-off vdW interactions would not likely perform as well if LJPME is used. Additionally, without LJPME, some observables may have substantially different values depending on the user-selected cutoff.</p> <p>LJPME is only valid for periodic systems, so the <code>nonperiodic_method</code> attribute is unaffected.</p> <p>LJPME does not involve a tail correction or long-range dispersion correction, as these are only relevant with cut-off vdW interactions. These attributes should be ignored if LJPME is used.</p> <p>There are many details and user-provided options in various PME implementations that might affect results; this proposal does not attempt to resolve them and instead suggests that a future OFF-EP should handle these questions (i.e. Issue #50).</p>"},{"location":"enhancement-proposals/off-ep-0009/#usage-and-impact","title":"Usage and Impact","text":"<p>LJPME is widely implemented in modern molecular simulation engines including OpenMM, GROMACS, Amber, CHARMM, and LAMMPS. Each implementation may differ slightly in its details; this proposal treats LJPME identically to PME for Coulombic interactions and leaves these differences unresolved.</p> <p>Some implementations may use the following approximations:</p> <ul> <li>Used with the 12-6 Lennard-Jones potential, where $r^12$ is short-range and the $r^6$ term is long-range, the $r^12$ term is excluded from the reciprocal space calculations.</li> <li>In reciprocal space, only geometric mixing rules are supported.</li> </ul> <p>While engine support for LJPME is strong, there may be compatibility issues in downstream methods such as free energy calculations or the use of non-Lennard-Jones potentials. We estimate these to be relatively rare and that a vast majority of use cases will be able to use LJPME in a general force field without major hindrance.</p> <p>Users may themselves wish to tinker with options specified in a SMIRNOFF force field, such as not using LJPME even if <code>periodic_method=\"Ewald3D\"</code> is specified. There is nothing a force field specification can do to prevent modifications like this, identically to other potentially-disruptive user modifications such as changing the cut-off distance.</p> <p>This proposal only adds a non-default option and does not make recommendations of which option is best.</p> <p>In this first iteration, <code>periodic_method=\"Ewald3D\"</code> is only compatible with <code>potential=\"Lennard-Jones-12-6\"</code>, which is currently the only supported value. Future changes to the <code>potential</code> attribute should discuss compatibility with LJPME, if any, including which terms can be ignored in reciprocal space.</p>"},{"location":"enhancement-proposals/off-ep-0009/#backward-compatibility","title":"Backward compatibility","text":"<p>This proposal only adds a new supported value for one attribute and makes no other changes, so it should be backwards-compatible with all current and compliant implementations. Conversion from version 0.4 should not change the information content of an OFFXML file or in-memory representation.</p> <p>This proposal bumps the version of the vdW section from 0.4 to 0.5 with the only difference being that <code>\"Ewald3D\"</code> is becoming a supported value for <code>periodic_potential</code>.</p>"},{"location":"enhancement-proposals/off-ep-0009/#detailed-description","title":"Detailed description","text":"<p>This change adds <code>\"Ewald3D\"</code> as a supported value of the <code>periodic_method</code> attribute in the <code>&lt;vdW&gt;</code> tag:</p> <pre><code>* `Ewald3D`: a method like [particle mesh Ewald](https://docs.openmm.org/latest/userguide/theory.html#coulomb-interaction-with-particle-mesh-ewald) should be used. This is only compatible with `potential=\"Lennard-Jones-12-6\"`.\n</code></pre> <p>The description is nearly identical to how the <code>periodic_potential</code> attribute of the <code>&lt;Electrostatics&gt;</code> section is described.</p> <p>This change corresponds to a bump in the vdW version from 0.4 to 0.5. All other aspects of the vdW section remain unchanged, including the default <code>\"periodic_method=\"cutoff\"</code>.</p>"},{"location":"enhancement-proposals/off-ep-0009/#alternatives","title":"Alternatives","text":"<p>OFF-EP-0007b includes this change as part of a larger overhaul with long-range dispersion corrections. That was introduced before OFF-EP-0008 split the <code>method</code> attribute into <code>periodic_method</code> and <code>nonperiodic_method</code> attributes and it placed the LJPME option within a new <code>long_range_treatment</code> attribute. This might lead to confusing and self-inconsistent combinations of attribute values such as</p> <pre><code>&lt;vdW ... periodic_method=\"cutoff\" nonperiodic_method=\"no-cutoff\" long_range_treatment=\"Ewald3D-ConductingBoundary\" &lt;/vdW&gt;\n</code></pre> <p>This proposal suggests that <code>nonperiodic_method</code> is a more natural place to specify the use of LJPME.</p> <p>This proposal does not attempt to generally resolve current ambiguities in long-range disperson treatment or how cut-off vdW interactions are handled.</p>"},{"location":"enhancement-proposals/off-ep-0009/#discussion","title":"Discussion","text":"<p>Several details were brought up in a SMIRNOFF meeting, including:</p> <ul> <li>Ewald summation can be efficiently implemented via PME.</li> <li>The use of PME for electrostatics interactions usually relies on a conducting periodic boundary (so-called \"tin foil\" boundary condiditions). There might be an analogous boundary condition used in LJPME implementations, but it's not obvious and there is nothing in LJ/vdW interactions that makes a clear analogy to the dielectric constant.</li> <li>Implementations with 12-6 Lennard Jones potentials are generally restricted to the $1/r^6$ term since the $1/r^{12}$ term is short-ranged only and ignoring it introduces no or negligible error.</li> <li>Modified Lennard-Jones with stronger repulsive terms (i.e. 14-6) should be feasible, still ignoring the repulsive term, but engines may not (yet) support this.</li> <li>Whether or not this assumption holds well for non-LJ potentials (such as a double exponential potential) is not yet explored.</li> <li>Switching from Lorentz\u2013Berthelot to geometric mixing rules in reciprocal space (long distance, past the cutoff or direct/reciprocal space transition) has been claimed to introduce only a small error. The authors emphasize that non-LJPME methods wouldn't include any interactions at these distances anyway.</li> <li>The Ewald3D solution can technically be extended to support any $1/r^{2n}$ powers, but we are not considering this for now.</li> </ul>"},{"location":"enhancement-proposals/off-ep-0009/#copyright","title":"Copyright","text":"<ul> <li>This was seeded from the OFF-EP template, which was is based upon the <code>numpy</code> NEP template and the <code>conda-forge</code> CFEP template.*</li> </ul> <p>All OFF-EPs are explicitly CC0 1.0 Universal.</p>"},{"location":"enhancement-proposals/off-ep-0010/","title":"OFF-EP 0010 \u2014 Clarify ProperTorsion implementation of idivf and dihedral calculation","text":"<p>Status: Submitted</p> <p>Authors: Lily Wang</p> <p>Acceptance criteria: Unanimity (4 approving reviews) or partial support (2 approvals and 2 week period with no reviews requesting changes)[https://openforcefield.atlassian.net/wiki/spaces/MEET/pages/2638774273/09-05-23+SMIRNOFF+Committee+Meeting]</p> <p>Stakeholders: John Chodera, David Mobley, Jeff Wagner, Lily Wang, Matt Thompson</p> <p>Created: 2024-02-07</p> <p>Discussion: Issue #59, Issue #60</p> <p>Implementation: <code>openforcefield/standards</code></p>"},{"location":"enhancement-proposals/off-ep-0010/#abstract","title":"Abstract","text":"<p>This change clarifies the implementation of SMIRKS matching, dihedral calculation, and <code>idivf=\"auto\"</code> for ProperTorsion parameters.</p>"},{"location":"enhancement-proposals/off-ep-0010/#motivation-and-scope","title":"Motivation and Scope","text":"<p>A ProperTorsion is defined between a connected quartet of atoms <code>i-j-k-l</code>. The dihedral angle is calculated between the two planes defined by <code>i-j-k</code> and <code>j-k-l</code>. The directions of these planes, and the resulting sign of the dihedral, depend on how they are defined; however, it is currently unclear what standard to follow. While both directions yield the same result for symmetric torsions where the phase is 0 or pi, the choice of direction is important for asymmetric torsions.</p> <p>In addition, a SMIRKS pattern that can match a particular  bonded quartet in either <code>i-j-k-l</code> or <code>l-k-j-i</code> order is  ambiguous, and the SMIRNOFF specification does not  guarantee that the match will be performed in any predetermined or deterministic order. As this may potentially lead to undesired results, this proposal adds a note highlighting this fact.</p> <p>Finally, the effect of the <code>idivf=\"auto\"</code> parameter on the ProperTorsion potential is outlined in words that can be interpreted ambiguously.</p> <p>All of these ambiguities may cause confusion to anybody implementing the SMIRNOFF spec.</p>"},{"location":"enhancement-proposals/off-ep-0010/#usage-and-impact","title":"Usage and Impact","text":"<p>This change defines the <code>idivf</code> parameter in line with the philosophy used in AMBER force fields. The OpenFF implementation has not hitherto used or implemented <code>idivf=\"auto\"</code> in its ProperTorsion parameters. As such there should be no practical impact on existing workflows and simulations. Other force fields and software that have implemented and interpreted the <code>idivf=\"auto\"</code> parameter in ways that do not align with our definition will need to be updated accordingly.</p> <p>The proposed clarification of input vector order and symmetric SMIRKS matching reflects existing implementations and simulations in OpenFF and OpenMM. Software that converts systems out into other formats may need to adjust the input order to ensure the correct sign of the torsion.</p>"},{"location":"enhancement-proposals/off-ep-0010/#backward-compatibility","title":"Backward compatibility","text":"<p>This proposal does not change behaviour, but rather explicitly defines what is currently implicit in the specification and the implementation in OpenFF infrastructure. Therefore, there should be no backwards compatibility issues.</p>"},{"location":"enhancement-proposals/off-ep-0010/#detailed-description","title":"Detailed description","text":"<p>This proposal adds the following section (bolded) clarifying <code>idivf</code> to the <code>ProperTorsion</code> spec:</p> <p>For convenience, an optional attribute specifies a torsion multiplicity by which the barrier height (<code>k#</code>) should be divided (<code>idivf#</code>). The final barrier height is calculated as <code>k#/idivf#</code>. <code>idivf</code> can be assigned an integer value (such as <code>\"1\"</code>), or <code>\"auto\"</code>. If <code>idivf=\"auto\"</code>, the following equation is used to determine the <code>idivf</code> value for a torsion applying to four atoms <code>i-j-k-l</code>, where <code>n_j</code> refers to the degree (i.e. number of bonds) of atom <code>j</code>:</p> <p><code>** **idivf = (n_j - 1) * (n_k - 1)** **</code></p> <p>The default behavior of this <code>idivf</code> can be controlled by the top-level attribute <code>default_idivf</code> (default: <code>\"auto\"</code>) for <code>&lt;ProperTorsions&gt;</code>.</p> <p>It also adds a section explaining the computation of <code>theta</code> to the <code>ProperTorsion</code> spec:</p> <p>In the potential function, the angle <code>theta</code> is calculated using input vectors defined by the four atoms of the torsion <code>i-j-k-l</code>.</p> <p></p> <p>Where the vector <code>r_ij</code> is defined as the vector from atom <code>j</code> to atom <code>i</code>: <code>r_ij = x_i - x_j</code> the angle <code>theta</code> should be calculated using the input vectors <code>r_ij</code>, <code>r_kj</code>, and <code>r_kl</code>. These define the planes <code>u_ijk</code> and <code>u_jkl</code> (see figure below, &gt; section A).</p> <p></p> <p>The sign of the angle is determined by comparing the <code>r_ji</code> vector to the <code>u_jkl</code> plane (see figure above, section B). If the <code>r_ji</code> vector has an acute angle to the <code>u_jkl</code> vector, the sign is positive; if the angle is obtuse, the sign is negative (section C in figure above).</p> <p>Pseudocode of the expected implementation is provided below.</p> <p>``` u_ijk = r_ji x r_jk u_jkl = r_jk x r_lk angle = acos(u_ijk \u2022 u_jkl)  # returns in domain [0, pi]</p> <p>rij_to_ujkl = r_ji \u2022 u_jkl if rij_to_ujkl &lt; 0:     sign = -1 else:     sign = 1 theta = sign * angle ```</p> <p>Note</p> <p>Angle values close to 0 and \u03c0 may be susceptible to precision errors in implementations.</p> <p>The sign of the <code>theta</code> angle is important in cases where the torsion profile is &gt; asymmetric, i.e. where the <code>phase</code> is neither 0 nor pi, for example in the case below.</p> <p></p> <p>And finally adds a note on how ProperTorsion SMIRKS are applied:</p> <p>Note</p> <p>A SMIRKS pattern that can match a particular bonded  quartet in either <code>i-j-k-l</code> or <code>l-k-j-i</code> order is  ambiguous, and the specification cannot guarantee the  match will be performed in any predetermined or  deterministic order, potentially leading to undesired  and undefined results.</p>"},{"location":"enhancement-proposals/off-ep-0010/#alternatives","title":"Alternatives","text":""},{"location":"enhancement-proposals/off-ep-0010/#alternative-1-the-idivf-parameter-could-be-removed","title":"Alternative 1: the <code>idivf</code> parameter could be removed","text":"<p>In this alternative scenario, <code>idivf</code> would be implicitly set to <code>1</code>, as has been the case in current SMIRNOFF force fields. Torsion parameters would be explicitly enumerated to only apply to one specific multiplicity, and the <code>k</code> barrier would be appropriately fit to the required scale.</p> <p>The approach of keeping and implementing <code>idivf=\"auto\"</code> was chosen to enable scientific experiments to investigate whether torsion multiplicity could be accounted for using <code>idivf</code>, reducing the number of necessary parameters to fit.</p>"},{"location":"enhancement-proposals/off-ep-0010/#alternative-2-disallow-asymmetric-torsions","title":"Alternative 2: disallow asymmetric torsions","text":"<p>In this alternative scenario, proper torsion parameters with asymmetric profiles (e.g. with phases outside 0 or pi) would be explicitly disallowed in the SMIRNOFF spec and OpenFF infrastructure. An error would be raised on reading these. This would render concerns about dihedral sign and the impact of atom order superfluous.</p> <p>The approach of keeping asymmetric torsions was chosen to:     * enable reading our existing Sage 2.0 force field, which was published with asymmetric torsions     * allow asymmetric torsions for future research</p>"},{"location":"enhancement-proposals/off-ep-0010/#discussion","title":"Discussion","text":"<ul> <li>Description of default_idivf=\"auto\" not in accordance with community understanding</li> <li>Suggestion to Remove use of idivf</li> <li>Slack thread clarifying dihedral computation in OpenMM</li> <li>This proposal was discussed at a SMIRNOFF committee meeting with the following points:<ul> <li>The history of the <code>idivf</code> parameter stems from AMBER</li> <li><code>idivf</code> is not currently used in SMIRNOFF force fields with values other than 1</li> <li><code>idivf=\"auto\"</code> is not currently implemented in OpenFF infrastructure</li> <li>An implementation of <code>idivf</code> could simply take into account molecular topology</li> <li><code>idivf=\"auto\"</code> can be defined using the degree of the atoms in the central bond</li> <li>Sage 2.0 did contain asymmetric torsions, where the sign of the dihedral affects the potential</li> <li>Measuring a dihedral angle from i-j-k-l should always give the same result as l-k-j-i </li> </ul> </li> </ul>"},{"location":"enhancement-proposals/off-ep-0010/#copyright","title":"Copyright","text":"<p>This template is based upon the <code>numpy</code> NEP template and the <code>conda-forge</code> CFEP template.</p> <p>All OFF-EPs are explicitly CC0 1.0 Universal.</p>"},{"location":"enhancement-proposals/off-ep-0011/","title":"OFF-EP 11 \u2014 Add NAGLCharges section to spec","text":"<p>Status: Draft</p> <p>Authors: Lily Wang, Matt Thompson, Jeff Wagner</p> <p>Acceptance criteria: Unanimity (4 approving reviews) or partial support (2 approvals and 2 week period with no reviews requesting changes)[https://openforcefield.atlassian.net/wiki/spaces/MEET/pages/2638774273/09-05-23+SMIRNOFF+Committee+Meeting]</p> <p>Created: 2025-04-01</p> <p>Discussion: PR #71</p> <p>Implementation: https://github.com/openforcefield/openff-interchange/pull/1206 https://github.com/openforcefield/openff-toolkit/pull/2048</p>"},{"location":"enhancement-proposals/off-ep-0011/#abstract","title":"Abstract","text":"<p>This change adds a <code>&lt;NAGLCharges&gt;</code> section which calls for a specific NAGL model to be used to assign atomic partial charges.</p>"},{"location":"enhancement-proposals/off-ep-0011/#motivation-and-scope","title":"Motivation and Scope","text":"<p>Motivation: OpenFF NAGL has built on existing work and trained a graph-convolutional neural network (GNN) that reproduces AM1-BCC ELF10 partial charges for a substantial set of chemistries. Currently, there is not a canonical method by which these GNN-provided charges can be requested in a SMIRNOFF force field. At the moment, a user can generate partial charges from a GNN and pass them to <code>create_interchange</code> or <code>create_openmm_system</code> alongside a SMIRNOFF force field as prespecified charges. To use GNNs in a flagship force field, this approach is not sufficient, and the SMIRNOFF specification must be updated to include enough information that an external developer could get the same charges themselves. </p> <p>Who this EP would affect: The changes described in this proposal affect any consumer of SMIRNOFF force fields that include <code>&lt;NAGLCharges&gt;</code>, which is likely to be the case for <code>openff-2.3.0</code> and beyond. Since it is not a required section, force field developers who choose to use other partial charge methods would not be affected. SMIRNOFF implementations must implement <code>&lt;NAGLCharges&gt;</code>, by definition, to use force fields that include this section. Existing force fields do not use this section, so they are not affected.</p> <p>Interaction with other sections: This proposal does not include changes or interactions with sections that do not modify partial charges, such as <code>&lt;vdW&gt;</code>, <code>&lt;Constraints&gt;</code>, <code>&lt;Bonds&gt;</code>, <code>&lt;Angles&gt;</code>, etc.</p> <p><code>NAGLCharges</code> fits into the current charge hierarchy as follows (with methods high in the list taking priority over those lower):</p> <ul> <li>Pre-specified charges (charge_from_molecules)</li> <li>Library charges</li> <li>NAGL charges</li> <li>ChargeIncrementModel charges</li> <li>ToolkitAM1BCC charges</li> </ul> <p>The initial <code>0.3</code> version of the <code>NAGLCharges</code> section does have special interactions with virtual sites, though future versions of this section may include direct assignment of partial charges to virtual sites. But for the 0.3 version of this section proposed by this EP, the behavior will be that, if the <code>NAGLCharges</code> section is present in a force field with virtual sites, NAGL is used to assign initial charges to the molecule, and then virtual sites apply their charge increments on top of those initial charges. </p> <p>Changes needed: The contents of this proposal derive from the current structure of OpenFF NAGL and the model(s) it implements. If this proposal is accepted, OpenFF NAGL may need minor updates to properly check its GNN implementation against the details encoded in a SMIRNOFF force field, but we expect these changes will be minor because the proposed changes derive directly from this software. The OpenFF Toolkit and Interchange will need minor updates to properly support this section and some edge cases that arise from using this section in combination with other section(s) and tools (such as prespecified charges and virtual site parameters which modify charges). Similar tools which also implement the encoded GNN and/or the SMIRNOFF specification more broadly will need similar updates.</p>"},{"location":"enhancement-proposals/off-ep-0011/#backward-compatibility","title":"Backward compatibility","text":"<p>This proposal adds a new section which does not affect backwards compatibility. While in practice the first version of the NAGLCharges section is very likely to be trained on AM1BCC ELF10 charges, we do not propose that existing force fields with the ToolkitAM1BCC section be assumed to be compatible with/automatically upgrade-able to NAGLCharges sections.</p>"},{"location":"enhancement-proposals/off-ep-0011/#detailed-description","title":"Detailed description","text":"<p>This proposal adds a section named <code>&lt;NAGLCharges</code>&gt;. The proposed initial version of this section (0.3) is as follows, and will be added verbatim to the specification if this EP is approved:</p>"},{"location":"enhancement-proposals/off-ep-0011/#naglcharges-use-a-specified-nagl-model-file-for-charge-assignment","title":"<code>&lt;NAGLCharges&gt;</code>: Use a specified NAGL model file for charge assignment","text":"<p>The <code>NAGLCharges</code> section-level element specifies that the force field should use a specific model file in conjunction with the <code>openff-nagl</code> software to assign partial charges. It contains the following attributes:</p> <ul> <li><code>version</code></li> <li><code>model_file</code></li> <li><code>model_file_hash</code> (optional)</li> <li><code>digital_object_identifier</code> (optional)</li> </ul> <p>The attribute <code>model_file</code> is a string identifying a file that includes model weights and other information. This by convention is a PyTorch <code>.pt</code> file, extended to contain additional information about the model that is read by the <code>openff-nagl</code> software. By their nature, GNNs use many more weights than can reasonably be encoded into an XML file, so pointing to an external file is a necessary and unavoidable layer of complexity.</p> <p>Because the NAGLCharges section requires loading information from a source outside the SMIRNOFF force field, two optional attributes are provided for ease and reproducibility of use.  - The optional attribute <code>model_file_hash</code> is a string that contains a SHA-256 file checksum, which will be checked against the loaded file.  If no <code>model_file_hash</code> is provided, then no hash comparison will be performed.  - The optional attribute <code>digital_object_identifier</code> is a string that contains a Zenodo Digital Object Identifier that can be accessed to fetch the model file. If the file can not be found locally, it may be fetched from this Zenodo entry. The Zenodo entry must have an attached file with a name matching the <code>model_file</code> string to be fetched. This field is not used for validating the model file contents, so if a model publisher wants to ensure that a user's local model file matches that at the DOI, they should use the <code>model_file_hash</code> field.</p> <p>Below is an example <code>&lt;NAGLCharges&gt;</code> section:</p> <pre><code>&lt;NAGLCharges model_file=\"openff-gnn-am1bcc-0.1.0-rc.3.pt\" model_file_hash=\"144ed56e46c5b3ad80157b342c8c0f8f7340e4d382a678e30dd300c811646bd0\" digital_object_identifier=\"10.5072/zenodo.203601\" version=\"0.3\"&gt;&lt;/NAGLCharges&gt;\n</code></pre> <p>This section only specifies a model file name, not a version of the NAGL software. The NAGL software is responsible for only accepting model files which it can correctly interpret.</p> <p>Note that atoms for which prespecified or <code>&lt;LibraryCharges&gt;</code> charges have already been applied are excluded from charging via <code>&lt;NAGLCharges&gt;</code>.</p>"},{"location":"enhancement-proposals/off-ep-0011/#discussion","title":"Discussion","text":"<ul> <li>Original SMIRNOFF EP</li> </ul>"},{"location":"enhancement-proposals/off-ep-0011/#copyright","title":"Copyright","text":"<p>This template is based upon the <code>numpy</code> NEP template and the <code>conda-forge</code> CFEP template.</p> <p>All OFF-EPs are explicitly CC0 1.0 Universal.</p>"},{"location":"enhancement-proposals/off-ep-template/","title":"OFF-EP X \u2014 Template","text":"<p>Status: &lt;Draft | Proposed | Accepted | Rejected | Deferred | Final&gt;</p> <p>Authors: &lt;list of authors' real names and optionally, email addresses&gt;</p> <p>Stakeholders: &lt;list of stakeholders that would be affected by this proposal&gt;</p> <p>Acceptance criteria: Acceptance by at least 3 of John Chodera, David Mobley, Lily Wang, or Jeff Wagner</p> <p>Created: &lt;date created&gt;</p> <p>Discussion: &lt;link to the PR / issue where proposal is being discussed&gt;</p> <p>Implementation: &lt;link an example / reference implementation of the proposal&gt;</p>"},{"location":"enhancement-proposals/off-ep-template/#abstract","title":"Abstract","text":"<p>A short description of the change being addressed.</p>"},{"location":"enhancement-proposals/off-ep-template/#motivation-and-scope","title":"Motivation and Scope","text":"<p>This section describes the need for the proposed change. It should describe the existing problem, who it affects, what it is trying to solve, and why. This section should explicitly address the scope of and key requirements for the proposed change. If the proposal is based around changes to software, this section should clearly indicate which package(s) would be changed.</p>"},{"location":"enhancement-proposals/off-ep-template/#usage-and-impact","title":"Usage and Impact","text":"<p>This section describes how users of the ecosystem will use features  described in this SMIRNOFF EP. It should be comprised mainly of code / file  examples that wouldn't  be possible without acceptance and implementation  of this proposal, as well as the impact the proposed changes would have  on the ecosystem. </p>"},{"location":"enhancement-proposals/off-ep-template/#backward-compatibility","title":"Backward compatibility","text":"<p>This section describes the ways in which the proposal breaks backward compatibility, and the migrations / strategies that will be implemented to reduce the inconvenience caused to the users.</p>"},{"location":"enhancement-proposals/off-ep-template/#detailed-description","title":"Detailed description","text":"<p>This section should provide a detailed description of the proposed change. It should include examples of how the new functionality would be used, intended use-cases and pseudo-code illustrating its use.</p>"},{"location":"enhancement-proposals/off-ep-template/#alternatives","title":"Alternatives","text":"<p>If there were any alternative solutions to solving the same problem, they should be discussed here, along with a justification for the chosen approach.</p>"},{"location":"enhancement-proposals/off-ep-template/#discussion","title":"Discussion","text":"<p>This section may just be a bullet list including links to any discussions regarding the proposal:</p> <ul> <li>This includes links to mailing list threads and / or relevant GitHub issues.</li> </ul>"},{"location":"enhancement-proposals/off-ep-template/#copyright","title":"Copyright","text":"<p>This template is based upon the <code>numpy</code> NEP template and the <code>conda-forge</code> CFEP template.</p> <p>All OFF-EPs are explicitly CC0 1.0 Universal.</p>"},{"location":"standards/qc-data-submission/","title":"QC Data Set Submission","text":"<p>This file outlines the standards and data requirements needed for submitting a dataset to QCArchive. This ensures that we have a consistent data model for downstream processes.</p> <p>STANDARDS version: 3 (adopted 2020.12.11)</p> <p>We distinguish between standards for the datasets (i.e. the actual data), and the standards for training/fitting and benchmarking/testing force fields.</p>"},{"location":"standards/qc-data-submission/#each-molecule-must-have-the-following-information","title":"Each molecule must have the following information:","text":"<ul> <li>Canonical isomeric explicit hydrogen mapped SMILES</li> <li>Provenance information of SMILES generation (NEW)</li> <li>Coordinates</li> <li>Total charge</li> </ul>"},{"location":"standards/qc-data-submission/#each-dataset-must-have-the-following-information","title":"Each dataset must have the following information:","text":"<ul> <li>Name</li> <li>Version (NEW)</li> <li>A short description</li> <li>A long description</li> <li>A link/URL/reference pointing to the provenance to reproduce dataset (e.g. the GH submission folder)</li> <li>A changelog (NEW)<ul> <li>The changelog is a python-like dictionary of the form <code>{ version: entry }</code></li> <li>Each entry in the changelog has the python dictionary form <code>{ person: str, date: str, description: str }</code></li> </ul> </li> <li>A github submitter username</li> <li>The name of the person who selected/sourced the molecules (NEW)</li> <li>A description of the meaning of the entry/molecule keys/names (NEW)</li> <li>Each entry has canonical isomeric explicit hydrogen mapped SMILES</li> <li>Provenance info of CMILES generation</li> <li>A set of elements that the dataset contains</li> <li>A set of charges that the dataset contains (NEW)</li> <li>The mean and max molecular weight of molecules the dataset contains (NEW)</li> <li>Enumerated stereo flag (True/False) (NEW)</li> <li>Enumerated tautomers flag (True/False) (NEW)</li> <li>Enumeration provenance info (NEW)</li> <li>Computation blacklist (known failures) (NEW)</li> <li>Dataset status flags (NEW):<ul> <li>Complete: <code>COMPLETE</code> <code>INCOMPLETE</code></li> <li>State: <code>DONE</code> <code>WORKING</code> <code>PAUSED</code></li> <li>Compliance: <code>V3</code> <code>NONE</code></li> <li>COMPLETE/DONE/V3; all molecules were successful</li> <li>INCOMPLETE/DONE/V3; some molecules were not calculated successfully, and won't be retried</li> <li>INCOMPLETE/WORKING/V3; in progress</li> <li>INCOMPLETE/DONE/NONE; the dataset does not conform to the standards, and can't be fixed</li> <li>INCOMPLETE/WORKING/NONE; the dataset does not conform to the standards, but is working anyways</li> <li>INCOMPLETE/PAUSED/NONE; the dataset does not conform to the standards, and calculations have been suspended</li> </ul> </li> </ul>"},{"location":"standards/qc-data-submission/#each-dataset-readme-must-contain-the-following-information","title":"Each dataset README must contain the following information","text":"<p>All information specified in the dataset</p>"},{"location":"standards/qc-data-submission/#each-revision-must-use-the-following-procedure","title":"Each revision must use the following procedure:","text":"<p>A revision means creating a new dataset based on an existing one, with the intent of fixing/improving it.</p> <ul> <li>The changelog must be copied from the current version, and a new entry added in the new version</li> <li>The dataset version information is updated</li> <li>The README is updated</li> <li>A notebook or record of the lines of python used to manipulate the dataset responsible for the revision<ul> <li>Each file of record should be named with the version that it first addresses, e.g. <code>submit-v3.0</code><ul> <li>If <code>submit-v3.0</code> also includes a <code>v3.1 and v3.2</code> update, then a new file for <code>v3.2.1</code> would be <code>submit-v3.2.1.py</code></li> </ul> </li> <li>Python notebooks should have version changes in order, and can be run incrementally.</li> </ul> </li> <li>Update the <code>index</code> of datasets on the GH repository</li> </ul>"},{"location":"standards/qc-data-submission/#qcarchive-specific-dataset-standards","title":"QCArchive-specific dataset standards","text":"<ul> <li>Compute tag is <code>openff</code></li> <li>The computations used for the FITTING standards use the specification named <code>default</code></li> </ul>"},{"location":"standards/qc-data-submission/#dataset-naming-and-versioning","title":"Dataset naming and versioning","text":"<p>Each dataset shall be versioned. - The naming of a dataset should have the following structure:</p> <pre><code>`\"OpenFF &lt;descriptive and uniquely-identifying name&gt; v&lt;version number&gt;\"`\n</code></pre> <ul> <li> <p>The first submission of a dataset will have a version <code>\"v3.0\"</code></p> </li> <li> <p>The major version shall indicate the STANDARDS that the dataset conforms to. Datasets which are not intended to conform to any STANDARDS should start with 0, e.g. <code>\"v0.1\"</code>. </p> </li> <li> <p>Datasets with versions starting with <code>\"v1.x\"</code> and <code>\"v2.x\"</code> do not follow any official STANDARDS, and thus should be considered <code>\"v0.x\"</code>.</p> </li> <li> <p>A minor version change (e.g. <code>\"v3.1\"</code>) represents a minor addition and/or fixes problems:</p> <ul> <li>Adding molecules</li> <li>Adding compute specifications</li> <li>Errors/bugs in the molecule specification</li> <li>Changes necessary to adhere to the STANDARDS (i.e. changes necessary to placate the NONE compliance status)</li> </ul> </li> <li> <p>A micro version change (e.g. <code>\"v3.1.1\"</code>) represents a cosmetic change, or a change that is based on dynamic information that does not change the underlying data:</p> <ul> <li>Cosmetic changes</li> <li>Updating the blacklist</li> <li>Updating the dataset status</li> </ul> </li> </ul> <p>This allows the ability to record the version update in the changelog, but not the actual dataset name as this would require a new dataset in QCArchive. </p> <p>A best-effort is made to ensure that a dataset follows its underlying STANDARDS. One must assume that the newest version of a dataset best conforms to these STANDARDS, and the same promise may not hold for earlier versions. The changelog should address any changes made to improve compliance.</p>"},{"location":"standards/qc-data-submission/#fitting-standards","title":"Fitting standards","text":"<ul> <li>Reference level of theory: <code>B3LYP-D3BJ/DZVP</code></li> <li>Geometry optimization: <code>geomeTRIC</code> using the TRIC coordinate system</li> <li>QM program: <code>Psi4</code></li> </ul> <p>For unconstrained geometries, all molecules must have:</p> <ul> <li>Wiberg Bond Orders (parameter interpolation)</li> <li>Hessian (vibrational/force constant fitting)</li> </ul> <p>Pre-submission filtering:</p> <ul> <li>Unless explicitly specified in the submission descriptions, torsion drives must be on four connected atoms</li> <li>Torsions driving a ring will give a warning, and torsions in a a ring of  3, 4, 5, or 6 atoms is considered an error</li> <li>Warnings will be given if an atom does not have a complete valence set</li> </ul> <p>Post-submission filtering:</p> <ul> <li>OpenFF toolkit ingestion with strict stereo checking in RDKit</li> <li>Hydrogen bonding</li> <li>Torsion drives on rings or other high barrier issues</li> <li>CMILES (topology) change</li> </ul>"},{"location":"standards/qc-data-submission/#force-field-releases","title":"Force field releases","text":"<p>Upon fitting for a new force field release, for the purpose of paper publication, public reference, etc, all molecules should be placed in a single dataset (per type). This gives a single reference for these data instead of many references. Filtering must be done prior, such that all molecules in the release datasets pass all post-submission filters.</p> <p>The format of these dataset names must use the following format:</p> <pre><code>`\"OpenFF SMIRNOFF &lt;friendly name&gt; &lt;ff version&gt;\"`\n</code></pre> <p>for example, all datasets (optimizations, torsion drives, and Hessians) with the name <code>\"OpenFF SMIRNOFF Sage 2.0.0\"</code> would refer to all data used to train <code>openff-2.0.0.offxml</code> in the <code>openforcefields</code> package.</p> <p>Besides the regular information from the other datasets, these fitting datasets must have:</p> <ul> <li><code>DOI</code></li> </ul>"},{"location":"standards/qc-data-submission/#force-field-benchmarking","title":"Force field benchmarking","text":"<p>These use an MM compute specification. The name of the specification must be the name of the FF file, e.g. <code>openff-2.0.0</code></p> <p>In these cases, the following pre-submission checks must be successful:</p> <ul> <li>OpenFF toolkit ingestion with strict stereo checking in RDKit</li> <li>The OpenFF toolkit can successfully create an OpenMM system</li> </ul>"},{"location":"standards/smirnoff/","title":"The SMIRks Native Open Force Field (SMIRNOFF) specification","text":"<p>SMIRNOFF is a specification for encoding molecular mechanics force fields from the Open Force Field Initiative (OpenFF) based on direct chemical perception using the broadly-supported SMARTS language, utilizing atom tagging extensions from SMIRKS.</p>"},{"location":"standards/smirnoff/#authors-and-acknowledgments","title":"Authors and acknowledgments","text":"<p>The SMIRNOFF specification was designed by the Open Force Field Initiative.</p> <p>Primary contributors include:</p> <ul> <li>Caitlin C. Bannan (University of California, Irvine) <code>&lt;bannanc@uci.edu&gt;</code></li> <li>Christopher I. Bayly (OpenEye Software) <code>&lt;bayly@eyesopen.com&gt;</code></li> <li>John D. Chodera  (Memorial Sloan Kettering Cancer Center) <code>&lt;john.chodera@choderalab.org&gt;</code></li> <li>David L. Mobley (University of California, Irvine) <code>&lt;dmobley@uci.edu&gt;</code></li> </ul> <p>SMIRNOFF and its reference implementation in the OpenFF Toolkit was heavily inspired by the ForceField class from the OpenMM molecular simulation package, and its associated XML format, developed by Peter K. Eastman (Stanford University).</p>"},{"location":"standards/smirnoff/#representations-and-encodings","title":"Representations and encodings","text":"<p>A force field in the SMIRNOFF format can be encoded in multiple representations. Currently, only an XML representation is supported by the reference implementation of the OpenFF Toolkit.</p>"},{"location":"standards/smirnoff/#xml-representation","title":"XML representation","text":"<p>A SMIRNOFF force field can be described in an XML representation, which provides a human- and machine-readable form for encoding the parameter set and its typing rules. This document focuses on describing the XML representation of the force field.</p> <ul> <li>By convention, XML-encoded SMIRNOFF force fields use an <code>.offxml</code> extension if written to a file to prevent confusion with other file formats.</li> <li>In XML, numeric quantities appear as strings, like <code>\"1\"</code> or <code>\"2.3\"</code>.</li> <li>Integers should always be written without a decimal point, such as <code>\"1\"</code>, <code>\"9\"</code>.</li> <li>Non-integral numbers, such as parameter values, should be written with a decimal point, such as <code>\"1.23\"</code>, <code>\"2.\"</code>.</li> <li>In XML, certain special characters that occur in valid SMARTS/SMIRKS patterns (such as ampersand symbols <code>&amp;</code>) must be specially encoded.</li> </ul> <p>See this list of XML and HTML character entity references for more details.</p>"},{"location":"standards/smirnoff/#future-representations-json-messagepack-yaml-and-toml","title":"Future representations: JSON, MessagePack, YAML, and TOML","text":"<p>We are considering supporting JSON, MessagePack, YAML, and TOML representations as well.</p>"},{"location":"standards/smirnoff/#reference-implementation","title":"Reference implementation","text":"<p>A reference implementation of the SMIRNOFF XML specification is provided in the OpenFF Toolkit.</p>"},{"location":"standards/smirnoff/#support-for-molecular-simulation-packages","title":"Support for molecular simulation packages","text":"<p>The reference implementation currently generates parameterized molecular mechanics systems for the GPU-accelerated OpenMM molecular simulation toolkit. Parameterized systems can subsequently be converted for use in other popular molecular dynamics simulation packages (including AMBER, CHARMM, NAMD, Desmond, and LAMMPS via ParmEd and InterMol. See the example on using SMIRNOFF in AMBER or GROMACS for more details.</p>"},{"location":"standards/smirnoff/#basic-structure","title":"Basic structure","text":"<p>A reference implementation of a SMIRNOFF force field parser that can process XML representations (denoted by <code>.offxml</code> file extensions) can be found in the OpenFF Toolkit <code>ForceField</code> class.</p> <p>Below, we describe the main structure of such an XML representation.</p>"},{"location":"standards/smirnoff/#the-enclosing-smirnoff-tag","title":"The enclosing <code>&lt;SMIRNOFF&gt;</code> tag","text":"<p>A SMIRNOFF force field XML specification always is enclosed in a <code>&lt;SMIRNOFF&gt;</code> tag, with certain required attributes provided. The required and permitted attributes defined in the <code>&lt;SMIRNOFF&gt;</code> are recorded in the version attribute, which describes the top-level attributes that are expected or permitted to be defined.</p> <pre><code>&lt;SMIRNOFF version=\"0.3\" aromaticity_model=\"OEAroModel_MDL\"&gt;\n...\n&lt;/SMIRNOFF&gt;\n</code></pre>"},{"location":"standards/smirnoff/#versioning","title":"Versioning","text":"<p>The SMIRNOFF force field format supports versioning via the <code>version</code> attribute to the root <code>&lt;SMIRNOFF&gt;</code> tag, e.g.:</p> <pre><code>&lt;SMIRNOFF version=\"0.3\" aromaticity_model=\"OEAroModel_MDL\"&gt;\n...\n&lt;/SMIRNOFF&gt;\n</code></pre> <p>The version format is <code>x.y</code>, where <code>x</code> denotes the major version and <code>y</code> denotes the minor version. SMIRNOFF versions are guaranteed to be backward-compatible within the same major version number series, but it is possible major version increments will break backwards-compatibility.</p> SMIRNOFF tag version Required attributes Optional attributes 0.1 <code>aromaticity_model</code> <code>Date</code>, <code>Author</code> 0.2 <code>aromaticity_model</code> <code>Date</code>, <code>Author</code> 0.3 <code>aromaticity_model</code> <code>Date</code>, <code>Author</code> <p>The SMIRNOFF tag versions describe the required and allowed force field-wide settings. The list of keywords is as follows:</p>"},{"location":"standards/smirnoff/#aromaticity-model","title":"Aromaticity model","text":"<p>The <code>aromaticity_model</code> specifies the aromaticity model used for chemical perception (here, <code>OEAroModel_MDL</code>).</p> <p>Currently, the only supported model is <code>OEAroModel_MDL</code>, which is implemented in both the RDKit and the OpenEye Toolkit.</p> <p>Todo</p> <p>Add link to complete open specification of <code>OEAroModel_MDL</code> aromaticity model.</p>"},{"location":"standards/smirnoff/#metadata","title":"Metadata","text":"<p>Typically, date and author information is included:</p> <pre><code>&lt;Date&gt;2016-05-25&lt;/Date&gt;\n&lt;Author&gt;J. D. Chodera (MSKCC) charge increment tests&lt;/Author&gt;\n</code></pre> <p>The <code>&lt;Date&gt;</code> tag should conform to ISO 8601 date formatting guidelines, such as <code>2018-07-14</code> or <code>2018-07-14T08:50:48+00:00</code> (UTC time).</p> <p>Todo</p> <p>Should we have a separate <code>&lt;Metadata&gt;</code> or <code>&lt;Provenance&gt;</code> section that users can add whatever they want to? This would minimize the potential for accidentally colliding with other tags we add in the future.</p>"},{"location":"standards/smirnoff/#physical-constants","title":"Physical constants","text":"<p>All published SMIRNOFF specification versions are intended for use with CODATA 2018 physical constants.  </p>"},{"location":"standards/smirnoff/#parameter-generators","title":"Parameter generators","text":"<p>Within the <code>&lt;SMIRNOFF&gt;</code> tag, top-level tags encode parameters for a force field based on a SMARTS/SMIRKS-based specification describing the chemical environment the parameters are to be applied to. The file has tags corresponding to OpenMM force terms (<code>Bonds</code>, <code>Angles</code>, <code>ProperTorsions</code>, etc., as discussed in more detail below); these specify functional form and other information for individual force terms.</p> <pre><code>&lt;Angles version=\"0.3\" potential=\"harmonic\"&gt;\n   ...\n&lt;/Angles&gt;     \n</code></pre> <p>which introduces the following <code>Angle</code> child elements which will use a harmonic potential.</p>"},{"location":"standards/smirnoff/#specifying-parameters","title":"Specifying parameters","text":"<p>Under each of these force terms, there are tags for individual parameter lines such as these:</p> <pre><code>&lt;Angles version=\"0.3\" potential=\"harmonic\"&gt;\n   &lt;Angle smirks=\"[a,A:1]-[#6X4:2]-[a,A:3]\" angle=\"109.50*degree\" k=\"100.0*kilocalorie_per_mole/radian**2\"/&gt;\n   &lt;Angle smirks=\"[#1:1]-[#6X4:2]-[#1:3]\" angle=\"109.50*degree\" k=\"70.0*kilocalorie_per_mole/radian**2\"/&gt;\n&lt;/Angles&gt;     \n</code></pre> <p>The first of these specifies the <code>smirks</code> attribute as <code>[a,A:1]-[#6X4:2]-[a,A:3]</code>, specifying a SMIRKS pattern that matches three connected atoms specifying an angle. This particular SMIRKS pattern matches a tetravalent carbon at the center with single bonds to two atoms of any type. This pattern is essentially a SMARTS string with numerical atom tags commonly used in SMIRKS to identify atoms in chemically unique environments---these can be thought of as tagged regular expressions for identifying chemical environments, and atoms within those environments. Here, <code>[a,A]</code> denotes any atom---either aromatic (<code>a</code>) or aliphatic (<code>A</code>), while <code>[#6X4]</code> denotes a carbon by element number (<code>#6</code>) that with four substituents (<code>X4</code>). The symbol <code>-</code> joining these groups denotes a single bond. The strings <code>:1</code>, <code>:2</code>, and <code>:2</code> label these atoms as indices 1, 2, and 3, with 2 being the central atom. Equilibrium angles are provided as the <code>angle</code> attribute, along with force constants as the <code>k</code> attribute (with corresponding units included in the expression).</p> <p>Note</p> <p>The reference implementation of the SMIRNOFF specification implemented in the OpenFF Toolkit will, by default, raise an exception if an unexpected attribute is encountered. The toolkit can be configured to accept non-spec keywords, but these are considered \"cosmetic\" and will not be evaluated.  For example, providing an <code>&lt;Angle&gt;</code> tag that also specifies a second force constant <code>k2</code> will result in an exception, unless the user specifies that \"cosmetic\" attributes should be accepted by the parser.</p>"},{"location":"standards/smirnoff/#smirnoff-parameter-specification-is-hierarchical","title":"SMIRNOFF parameter specification is hierarchical","text":"<p>Parameters that appear later in a SMIRNOFF specification override those which come earlier if they match the same pattern. This can be seen in the example above, where the first line provides a generic angle parameter for any tetravalent carbon (single bond) angle, and the second line overrides this for the specific case of a hydrogen-(tetravalent carbon)-hydrogen angle. This hierarchical structure means that a typical parameter file will tend to have generic parameters early in the section for each force type, with more specialized parameters assigned later.</p>"},{"location":"standards/smirnoff/#multiple-smirnoff-representations-can-be-processed-in-sequence","title":"Multiple SMIRNOFF representations can be processed in sequence","text":"<p>Multiple SMIRNOFF data sources (e.g. multiple OFFXML files) can be loaded in sequence. If these files each contain unique top-level tags (such as <code>&lt;Bonds&gt;</code>, <code>&lt;Angles&gt;</code>, etc.), the resulting force field will be independent of the order in which the files are loaded. If, however, the same tag occurs in multiple files, the contents of the tags are merged, with the tags read later taking precedence over the parameters read earlier, provided the top-level tags have compatible attributes. The resulting force field will therefore depend on the order in which parameters are read.</p> <p>This behavior is intended for limited use in appending very specific parameters, such as parameters specifying solvent models, to override standard parameters.</p>"},{"location":"standards/smirnoff/#units","title":"Units","text":"<p>To minimize the potential for unit conversion errors, SMIRNOFF force fields explicitly specify units in a form readable to both humans and computers for all unit-bearing quantities. Allowed values for units are given in openmm.unit (though in the future this may change to the more widely-used Python pint library). For example, for the <code>angle</code> (equilibrium angle) and <code>k</code> (force constant) parameters in the <code>&lt;Angle&gt;</code> example block above, both attributes are specified as a mathematical expression </p> <pre><code>   &lt;Angle smirks=\"[#1:1]-[#6X4:2]-[#1:3]\" angle=\"109.50*degree\" k=\"70.0*kilocalorie_per_mole/radian**2\"/&gt;\n</code></pre> <p>For more information, see the standard OpenMM unit system.</p>"},{"location":"standards/smirnoff/#smirnoff-independently-applies-parameters-to-each-class-of-potential-energy-terms","title":"SMIRNOFF independently applies parameters to each class of potential energy terms","text":"<p>The SMIRNOFF uses direct chemical perception to assign parameters for potential energy terms independently for each term. Rather than first applying atom typing rules and then looking up combinations of the resulting atom types for each force term, the rules for directly applying parameters to atoms is compartmentalized in separate sections. The file consists of multiple top-level tags defining individual components of the potential energy (in addition to charge models or modifiers), with each section specifying the typing rules used to assign parameters for that potential term:</p> <pre><code>&lt;Bonds version=\"0.3\" potential=\"harmonic\"&gt;\n   &lt;Bond smirks=\"[#6X4:1]-[#6X4:2]\" length=\"1.526*angstrom\" k=\"620.0*kilocalories_per_mole/angstrom**2\"/&gt;\n   &lt;Bond smirks=\"[#6X4:1]-[#1:2]\" length=\"1.090*angstrom\" k=\"680.0*kilocalories_per_mole/angstrom**2\"/&gt;\n   ...\n&lt;/Bonds&gt;\n\n&lt;Angles version=\"0.3\" potential=\"harmonic\"&gt;\n   &lt;Angle smirks=\"[a,A:1]-[#6X4:2]-[a,A:3]\" angle=\"109.50*degree\" k=\"100.0*kilocalories_per_mole/radian**2\"/&gt;\n   &lt;Angle smirks=\"[#1:1]-[#6X4:2]-[#1:3]\" angle=\"109.50*degree\" k=\"70.0*kilocalories_per_mole/radian**2\"/&gt;\n   ...\n&lt;/Angles&gt;\n</code></pre> <p>Each top-level tag specifying a class of potential energy terms has an attribute <code>potential</code> for specifying the functional form for the interaction. Common defaults are defined, but the goal is to eventually allow these to be overridden by alternative choices or even algebraic expressions in the future, once more molecular simulation packages support general expressions. We distinguish between functional forms available in all common molecular simulation packages (specified by keywords) and support for general functional forms available in a few packages (especially OpenMM, which supports a flexible set of custom forces defined by algebraic expressions) with an EXPERIMENTAL label.</p> <p>Many of the specific forces are implemented as discussed in the OpenMM Documentation; see especially Section 19 on Standard Forces for mathematical descriptions of these functional forms. Some top-level tags provide attributes that modify the functional form used to be consistent with packages such as AMBER or CHARMM.</p>"},{"location":"standards/smirnoff/#partial-charge-and-electrostatics-models","title":"Partial charge and electrostatics models","text":"<p>SMIRNOFF supports several approaches to specifying electrostatic models. Currently, only classical fixed point charge models are supported, but future extensions to the specification will support point multipoles, point polarizable dipoles, Drude oscillators, charge equilibration methods, and so on.</p>"},{"location":"standards/smirnoff/#librarycharges-library-charges-for-polymeric-residues-and-special-solvent-models","title":"<code>&lt;LibraryCharges&gt;</code>: Library charges for polymeric residues and special solvent models","text":"<p>A mechanism is provided for specifying library charges that can be applied to molecules or residues that match provided templates. Library charges are applied first, and atoms for which library charges are applied will be excluded from alternative charging schemes listed below.</p> <p>For example, to assign partial charges for a non-terminal ALA residue from the AMBER ff14SB parameter set:</p> <pre><code>&lt;LibraryCharges version=\"0.3\"&gt;\n   &lt;!-- match a non-terminal alanine residue with AMBER ff14SB partial charges --&gt;\n   &lt;LibraryCharge name=\"ALA\" smirks=\"[NX3:1]([#1:2])([#6])[#6H1:3]([#1:4])([#6:5]([#1:6])([#1:7])[#1:8])[#6:9](=[#8:10])[#7]\" charge1=\"-0.4157*elementary_charge\" charge2=\"0.2719*elementary_charge\" charge3=\"0.0337*elementary_charge\" charge4=\"0.0823*elementary_charge\" charge5=\"-0.1825*elementary_charge\" charge6=\"0.0603*elementary_charge\" charge7=\"0.0603*elementary_charge\" charge8=\"0.0603*elementary_charge\" charge9=\"0.5973*elementary_charge\" charge10=\"-0.5679*elementary_charge\"/&gt;\n   ...\n&lt;/LibraryCharges&gt;\n</code></pre> <p>In this case, a SMIRKS string defining the residue tags each atom that should receive a partial charge, with the charges specified by attributes <code>charge1</code>, <code>charge2</code>, etc. The <code>name</code> attribute is optional. Note that, for a given template, chemically equivalent atoms should be assigned the same charge to avoid undefined behavior. If the template matches multiple non-overlapping sets of atoms, all such matches will be assigned the provided charges. If multiple templates match the same set of atoms, the last template specified will be used.</p> <p>Solvent models or excipients can also have partial charges specified via the <code>&lt;LibraryCharges&gt;</code> tag. For example, to ensure water molecules are assigned partial charges for TIP3P water, we can specify a library charge entry:</p> <pre><code>&lt;LibraryCharges version=\"0.3\"&gt;\n   &lt;!-- TIP3P water oxygen with charge override --&gt;\n   &lt;LibraryCharge name=\"TIP3P\" smirks=\"[#1:1]-[#8X2H2+0:2]-[#1:3]\" charge1=\"0.417*elementary_charge\" charge2=\"-0.834*elementary_charge\" charge3=\"0.417*elementary_charge\"/&gt;\n&lt;/LibraryCharges&gt;\n</code></pre> LibraryCharges section tag version Tag attributes and default values Required parameter attributes Optional parameter attributes 0.3 <code>smirks</code>, <code>charge</code> (indexed) <code>name</code>, <code>id</code>, <code>parent_id</code> <p>Note that atoms for which prespecified charges have already been applied are excluded from charging via <code>&lt;LibraryCharges&gt;</code>.</p>"},{"location":"standards/smirnoff/#chargeincrementmodel-small-molecule-and-fragment-charges","title":"<code>&lt;ChargeIncrementModel&gt;</code>: Small molecule and fragment charges","text":"<p>In keeping with the AMBER force field philosophy, especially as implemented in small molecule force fields such as GAFF, GAFF2, and parm@Frosst, partial charges for small molecules are usually assigned using a quantum chemical method (usually a semiempirical method such as AM1) and a partial charge determination scheme (such as CM2 or RESP), then subsequently corrected via charge increment rules, as in the highly successful AM1-BCC approach.</p> <p>Here is an example:</p> <pre><code>&lt;ChargeIncrementModel version=\"0.4\" number_of_conformers=\"1\" partial_charge_method=\"AM1-Mulliken\"&gt;\n  &lt;!-- A fractional charge can be moved along a single bond --&gt;\n  &lt;ChargeIncrement smirks=\"[#6X4:1]-[#6X3a:2]\" charge_increment1=\"-0.0073*elementary_charge\" charge_increment2=\"0.0073*elementary_charge\"/&gt;\n  &lt;ChargeIncrement smirks=\"[#6X4:1]-[#6X3a:2]-[#7]\" charge_increment1=\"0.0943*elementary_charge\" charge_increment2=\"-0.0943*elementary_charge\"/&gt;\n  &lt;!--- Alternatively, fractional charges can be redistributed among any number of bonded atoms --&gt;\n  &lt;ChargeIncrement smirks=\"[N:1]([H:2])([H:3])\" charge_increment1=\"0.02*elementary_charge\" charge_increment2=\"-0.01*elementary_charge\" charge_increment3=\"-0.01*elementary_charge\"/&gt;\n  &lt;!-- As of version 0.4 of the ChargeIncrementModel tag, it is possible to define one less charge_increment attribute than there are tagged atoms --&gt;\n  &lt;!-- The final, undefined charge_increment will be calculated as to make the sum of the charge_increments equal 0 --&gt;\n  &lt;ChargeIncrement smirks=\"[#6X4:1]-[#8:2]\" charge_increment1=\"-0.0718*elementary_charge\"/&gt;\n  &lt;ChargeIncrement smirks=\"[N]-[C:1]-[C:2]-[Cl:3]\" charge_increment1=\"-0.123\" charge_increment2=\"0.456\" /&gt;\n&lt;/ChargeIncrementModel&gt;\n</code></pre> <p>The sum of formal charges for the molecule or fragment will be used to determine the total charge the molecule or fragment will possess.</p> <p><code>&lt;ChargeIncrementModel&gt;</code> provides several optional attributes to control its behavior:</p> <ul> <li>The <code>number_of_conformers</code> attribute (default: <code>\"1\"</code>) is used to specify how many conformers will be generated for the molecule (or capped fragment) prior to charging.</li> <li>The <code>partial_charge_method</code> attribute (default: <code>\"AM1-Mulliken\"</code>) is used to specify how uncorrected partial charges are to be generated. Later additions will add restrained electrostatic potential fitting (RESP) capabilities.   </li> </ul> <p>The <code>&lt;ChargeIncrement&gt;</code> tags specify how the quantum chemical derived charges are to be corrected to produce the final charges. The <code>charge_increment#</code> attributes specify how much the charge on the associated tagged atom index (replacing <code>#</code>) should be modified.</p> <p>Starting in the 0.4 version of this section, a <code>ChargeIncrement</code> may be specified with one less <code>charge_increment</code> value than it has tagged atoms. The missing <code>charge_increment</code> value must be that of the highest tagged atom index.  This missing <code>charge_increment</code> will be calculated to offset the sum of the other <code>charge_increment</code>s in the same <code>ChargeIncrement</code> parameter to achieve a net value of 0. This allows <code>ChargeIncrement</code> parameters to be defined similar to bond charge corrections. </p> <p>Note that atoms for which prespecified, <code>&lt;NAGLCharges&gt;</code>, or <code>&lt;LibraryCharges&gt;</code> charges have already been applied are excluded from charging via <code>&lt;ChargeIncrementModel&gt;</code>.</p> <p>Future additions will provide options for intelligently fragmenting large molecules and biopolymers, as well as a <code>capping</code> attribute to specify how fragments with dangling bonds are to be capped to allow these groups to be charged.</p> ChargeIncrementModel section tag version Tag attributes and default values Required parameter attributes Optional parameter attributes 0.3 <code>number_of_conformers=\"1\"</code>, <code>partial_charge_method='AM1-Mulliken'</code> <code>smirks</code>, <code>charge_increment</code> (indexed, must be equal to number of tagged atoms in <code>smirks</code>) <code>name</code>, <code>id</code>, <code>parent_id</code> 0.4 <code>number_of_conformers=\"1\"</code>, <code>partial_charge_method='AM1-Mulliken'</code> <code>smirks</code>, <code>charge_increment</code> (indexed, must be equal to- or one less than- number of tagged atoms in <code>smirks</code>) <code>name</code>, <code>id</code>, <code>parent_id</code>"},{"location":"standards/smirnoff/#toolkitam1bcc-temporary-support-for-toolkit-based-am1-bcc-partial-charges","title":"<code>&lt;ToolkitAM1BCC&gt;</code>: Temporary support for toolkit-based AM1-BCC partial charges","text":"<p>Warning</p> <p>This tag is not permanent and may be phased out in future versions of the spec.</p> <p>This tag calculates partial charges using the default settings of the highest-priority cheminformatics toolkit that can perform AM1-BCC charge assignment. Currently, if the OpenEye toolkit is licensed and available, this will use QuacPac configured to generate charges using AM1-BCC ELF10 for each unique molecule in the topology. Otherwise RDKit will be used for initial conformer generation and the AmberTools antechamber/sqm software will be used for charge calculation.</p> <p>If this tag is specified for a force field, conformer generation will be performed regardless of whether conformations of the input molecule were provided. If RDKit/AmberTools are used as the toolkit backend for this calculation, only the first conformer is used for AM1-BCC calculation.</p> <p>The charges generated by this tag may differ depending on which toolkits are available.</p> <p>Note that atoms for which prespecified, <code>&lt;NAGLCharges&gt;</code>, <code>&lt;LibraryCharges&gt;</code>, or <code>&lt;ChargeIncrementModel&gt;</code> charges have already been applied are excluded from charging via <code>&lt;ToolkitAM1BCC&gt;</code>.</p>"},{"location":"standards/smirnoff/#naglcharges-use-a-specified-nagl-model-file-for-charge-assignment","title":"<code>&lt;NAGLCharges&gt;</code>: Use a specified NAGL model file for charge assignment","text":"<p>The <code>NAGLCharges</code> section-level element specifies that the force field should use a specific model file in conjunction with the <code>openff-nagl</code> software to assign partial charges. It contains the following attributes:</p> <ul> <li><code>version</code></li> <li><code>model_file</code></li> <li><code>model_file_hash</code> (optional)</li> <li><code>digital_object_identifier</code> (optional)</li> </ul> <p>The attribute <code>model_file</code> is a string identifying a file that includes model weights and other information. This by convention is a PyTorch <code>.pt</code> file, extended to contain additional information about the model that is read by the <code>openff-nagl</code> software. By their nature, GNNs use many more weights than can reasonably be encoded into an XML file, so pointing to an external file is a necessary and unavoidable layer of complexity.</p> <p>Because the NAGLCharges section requires loading information from a source outside the SMIRNOFF force field, two optional attributes are provided for ease and reproducibility of use.  - The optional attribute <code>model_file_hash</code> is a string that contains a SHA-256 file checksum, which will be checked against the loaded file.  If no <code>model_file_hash</code> is provided, then no hash comparison will be performed.  - The optional attribute <code>digital_object_identifier</code> is a string that contains a Zenodo Digital Object Identifier that can be accessed to fetch the model file. If the file can not be found locally, it may be fetched from this Zenodo entry. The Zenodo entry must have an attached file with a name matching the <code>model_file</code> string to be fetched. This field is not used for validating the model file contents, so if a model publisher wants to ensure that a user's local model file matches that at the DOI, they should use the <code>model_file_hash</code> field.</p> <p>Below is an example <code>&lt;NAGLCharges&gt;</code> section:</p> <pre><code>&lt;NAGLCharges model_file=\"openff-gnn-am1bcc-0.1.0-rc.3.pt\" model_file_hash=\"144ed56e46c5b3ad80157b342c8c0f8f7340e4d382a678e30dd300c811646bd0\" digital_object_identifier=\"10.5072/zenodo.203601\" version=\"0.3\"&gt;&lt;/NAGLCharges&gt;\n</code></pre> <p>This section only specifies a model file name, not a version of the NAGL software. The NAGL software is responsible for only accepting model files which it can correctly interpret.</p> <p>Note that atoms for which prespecified or <code>&lt;LibraryCharges&gt;</code> charges have already been applied are excluded from charging via <code>&lt;NAGLCharges&gt;</code>.</p>"},{"location":"standards/smirnoff/#prespecified-charges-reference-implementation-only","title":"Prespecified charges (reference implementation only)","text":"<p>In our reference implementation of SMIRNOFF in the OpenFF Toolkit, we also provide a method for specifying user-defined partial charges during system creation. This functionality is accessed by using the <code>charge_from_molecules</code> optional argument during system creation, such as in  <code>ForceField.create_openmm_system(topology, charge_from_molecules=molecule_list)</code>.  When this optional keyword is provided, all matching molecules will have their charges set by the entries in <code>molecule_list</code>. This method is provided solely for convenience in developing and exploring alternative charging schemes; actual force field releases for distribution will use one of the other mechanisms specified above.</p>"},{"location":"standards/smirnoff/#parameter-sections","title":"Parameter sections","text":"<p>A SMIRNOFF force field consists of one or more force field term definition sections. For the most part, these sections independently define how a specific component of the potential energy function for a molecular system is supposed to be computed (such as bond stretch energies, or Lennard-Jones interactions), as well as how parameters are to be assigned for this particular term. Each parameter section contains a <code>version</code>, which encodes the behavior of the section, as well as the required and optional attributes the top-level tag and SMIRKS-based parameters.  This decoupling of how parameters are assigned for each term provides a great deal of flexibility in composing new force fields while allowing a minimal number of parameters to be used to achieve accurate modeling of intramolecular forces.</p> <p>Below, we describe the specification for each force field term definition using the XML representation of a SMIRNOFF force field.</p> <p>As an example of a complete SMIRNOFF force field specification, see a recent force field in the \"Parsley\" line (openff-1.2.0.offxml).</p> <p>Note</p> <p>Not all parameter sections must be specified in a SMIRNOFF force field. A wide variety of force field terms are provided in the specification, but a particular force field only needs to define a subset of those terms.</p>"},{"location":"standards/smirnoff/#vdw","title":"<code>&lt;vdW&gt;</code>","text":"<p>van der Waals force parameters, which include repulsive forces arising from Pauli exclusion and attractive forces arising from dispersion, are specified via the <code>&lt;vdW&gt;</code> tag with sub-tags for individual <code>Atom</code> entries, such as:</p> <pre><code>&lt;vdW version=\"0.5\" potential=\"Lennard-Jones-12-6\" combining_rules=\"Lorentz-Berthelot\" scale12=\"0.0\" scale13=\"0.0\" scale14=\"0.5\" scale15=\"1.0\" switch_width=\"1.0*angstrom\" cutoff=\"9.0*angstrom\" periodic_method=\"cutoff\" nonperiodic_method=\"no-cutoff\"&gt;\n   &lt;Atom smirks=\"[#1:1]\" sigma=\"1.4870*angstrom\" epsilon=\"0.0157*kilocalories_per_mole\"/&gt;\n   &lt;Atom smirks=\"[#1:1]-[#6]\" sigma=\"1.4870*angstrom\" epsilon=\"0.0157*kilocalories_per_mole\"/&gt;\n   ...\n&lt;/vdW&gt;\n</code></pre> <p>For standard Lennard-Jones 12-6 potentials (specified via <code>potential=\"Lennard-Jones-12-6\"</code>), the <code>epsilon</code> parameter denotes the well depth, while the size property can be specified either via providing the <code>sigma</code> attribute, such as <code>sigma=\"1.3*angstrom\"</code>, or via the <code>r_0/2</code> (<code>rmin/2</code>) values used in AMBER force fields (here denoted <code>rmin_half</code> as in the example above). The two are related by <code>r0 = 2^(1/6)*sigma</code> and conversion is done internally into the <code>sigma</code> values used in OpenMM.</p> <p>Different cut-off treatments can be applied to periodic and non-periodic systems using the <code>periodic_method</code> and <code>nonperiodic_method</code> attributes, respectively. Each can take the following values:</p> <ul> <li><code>\"cutoff\"</code>: The vdW interaction is truncated at a distance specified by the <code>cutoff</code> attribute.</li> <li><code>\"no-cutoff\"</code>: The vdW interaction is not truncated.</li> </ul> <p><code>periodic_method</code> can take additionally take the following values:</p> <ul> <li><code>Ewald3D</code>: a method like Ewald summation (often referred to in implementation as \"LJPME\") should be used. This is only compatible with <code>potential=\"Lennard-Jones-12-6\"</code>.</li> </ul> <p>By default, <code>periodic_method=\"cutoff</code> and <code>nonperiodic_method=\"no-cutoff\"</code>. If either attribute is set to <code>no-cutoff</code>, other attributes dealing with the cut-off are ignored.</p> <p>Attributes in the <code>&lt;vdW&gt;</code> tag specify the scaling terms applied to the energies of 1-2 (<code>scale12</code>, default: 0), 1-3 (<code>scale13</code>, default: 0), 1-4 (<code>scale14</code>, default: 0.5), and 1-5 (<code>scale15</code>, default: 1.0) interactions, as well as the distance at which a switching function is applied (<code>switch_width</code>, default: <code>\"1.0*angstrom\"</code>), and the cutoff (<code>cutoff</code>, default: <code>\"9.0*angstroms\"</code>). Version 0.3 assumes that the long-range dispersion handling is isotropic.</p> <p>The <code>potential</code> attribute (default: <code>\"none\"</code>) specifies the potential energy function to use. Currently, only <code>potential=\"Lennard-Jones-12-6\"</code> is supported:</p> <pre><code>U(r) = 4*epsilon*((sigma/r)^12 - (sigma/r)^6)\n</code></pre> <p>The <code>combining_rules</code> attribute (default: <code>\"none\"</code>) currently only supports <code>\"Lorentz-Berthelot\"</code>, which specifies the geometric mean of <code>epsilon</code> and arithmetic mean of <code>sigma</code>. Support for other Lennard-Jones mixing schemes will be added later: <code>Waldman-Hagler</code>, <code>Fender-Halsey</code>, <code>Kong</code>, <code>Tang-Toennies</code>, <code>Pena</code>, <code>Hudson-McCoubrey</code>, <code>Sikora</code>.</p> <p>Later revisions will add support for additional potential types (e.g., <code>Buckingham-exp-6</code>), as well as the ability to support arbitrary algebraic functional forms using a scheme such as</p> <pre><code>&lt;vdW version=\"0.3\" potential=\"4*epsilon*((sigma/r)^12-(sigma/r)^6)\" scale12=\"0.0\" scale13=\"0.0\" scale14=\"0.5\" scale15=\"1\" switch_width=\"1.0*angstrom\" cutoff=\"9.0*angstrom\"&gt;\n   &lt;CombiningRules&gt;\n      &lt;CombiningRule parameter=\"sigma\" function=\"(sigma1+sigma2)/2\"/&gt;\n      &lt;CombiningRule parameter=\"epsilon\" function=\"sqrt(epsilon1*epsilon2)\"/&gt;\n   &lt;/CombiningRules&gt;\n   &lt;Atom smirks=\"[#1:1]\" sigma=\"1.4870*angstrom\" epsilon=\"0.0157*kilocalories_per_mole\"/&gt;\n   &lt;Atom smirks=\"[#1:1]-[#6]\" sigma=\"1.4870*angstrom\" epsilon=\"0.0157*kilocalories_per_mole\"/&gt;\n   ...\n&lt;/vdW&gt;\n</code></pre> <p>If the <code>&lt;CombiningRules&gt;</code> tag is provided, it overrides the <code>combining_rules</code> attribute.</p> <p>Later revisions will also provide support for special interactions using the <code>&lt;AtomPair&gt;</code> tag:</p> <pre><code>&lt;vdW version=\"0.3\" potential=\"Lennard-Jones-12-6\" combining_rules=\"Lorentz-Berthelot\" scale12=\"0.0\" scale13=\"0.0\" scale14=\"0.5\" scale15=\"1\"&gt;\n   &lt;AtomPair smirks1=\"[#1:1]\" smirks2=\"[#6:2]\" sigma=\"1.4870*angstrom\" epsilon=\"0.0157*kilocalories_per_mole\"/&gt;   \n   ...\n&lt;/vdW&gt;   \n</code></pre> vdW section tag version Tag attributes and default values Required parameter attributes Optional parameter attributes 0.3 <code>potential=\"Lennard-Jones-12-6</code>, <code>combining_rules=\"Lorentz-Berthelot\"</code>, <code>scale12=\"0\"</code>, <code>scale13=\"0\"</code>, <code>scale14=\"0.5\"</code>, <code>scale15=\"1.0\"</code>, <code>cutoff=\"9.0*angstrom\"</code>, <code>switch_width=\"1.0*angstrom\"</code>, <code>method=\"cutoff\"</code> <code>smirks</code>, <code>epsilon</code>, (<code>sigma</code> OR <code>rmin_half</code>) <code>id</code>, <code>parent_id</code> 0.4 <code>potential=\"Lennard-Jones-12-6</code>, <code>combining_rules=\"Lorentz-Berthelot\"</code>, <code>scale12=\"0\"</code>, <code>scale13=\"0\"</code>, <code>scale14=\"0.5\"</code>, <code>scale15=\"1.0\"</code>, <code>cutoff=\"9.0*angstrom\"</code>, <code>switch_width=\"1.0*angstrom\"</code>, <code>periodic_method=\"cutoff\"</code>, <code>nonperiodic_method=\"no-cutoff\"</code> <code>smirks</code>, <code>epsilon</code>, (<code>sigma</code> OR <code>rmin_half</code>) <code>id</code>, <code>parent_id</code> 0.5 <code>potential=\"Lennard-Jones-12-6</code>, <code>combining_rules=\"Lorentz-Berthelot\"</code>, <code>scale12=\"0\"</code>, <code>scale13=\"0\"</code>, <code>scale14=\"0.5\"</code>, <code>scale15=\"1.0\"</code>, <code>cutoff=\"9.0*angstrom\"</code>, <code>switch_width=\"1.0*angstrom\"</code>, <code>periodic_method=\"cutoff\"</code>, <code>nonperiodic_method=\"no-cutoff\"</code> <code>smirks</code>, <code>epsilon</code>, (<code>sigma</code> OR <code>rmin_half</code>) <code>id</code>, <code>parent_id</code>"},{"location":"standards/smirnoff/#electrostatics","title":"<code>&lt;Electrostatics&gt;</code>","text":"<p>Electrostatic interactions are specified via the <code>&lt;Electrostatics&gt;</code> tag.</p> <pre><code>&lt;Electrostatics version=\"0.4\" periodic_potential=\"Ewald3D-ConductingBoundary\" nonperiodic_potential=\"Coulomb\" exception_potential=\"Coulomb\" scale12=\"0.0\" scale13=\"0.0\" scale14=\"0.833333\" scale15=\"1.0\"/&gt;\n</code></pre> <p>Some methods for computing electrostatic interactions are not valid for periodic systems, so separate methods must be specified for periodic (<code>periodic_potential</code>) and non-periodic (<code>nonperiodic_potential</code>) systems.</p> <p>The <code>periodic_potential</code> attribute specifies the manner in which electrostatic interactions are to be computed in periodic systems. Allowed values are:</p> <ul> <li><code>Ewald3D-ConductingBoundary</code> (default) denotes that a method like particle mesh Ewald should be used.</li> <li>A function denotes that the specified function should be used, which may make use of <code>cutoff</code>, <code>switch_width</code>, and/or <code>solvent_dielectric</code> terms</li> </ul> <p>The <code>nonperiodic_potential</code> attribute specifies the manner in which electrostatic interactions are to be computed in non-periodic systems. Allowed values are:</p> <ul> <li><code>Coulomb</code> (default) denotes that the standard Coulomb potential should be used with no cutoff or reaction-field attenuation</li> <li>A function denotes that the specified function should be used, which may make use of <code>cutoff</code>, <code>switch_width</code>, and/or <code>solvent_dielectric</code> terms</li> </ul> <p>The <code>exception_potential</code> attribute specifies the treatment of intramolecular electrostatics exceptions, such as scaled 1-4 interactions. Allowed values are:</p> <ul> <li><code>Coulomb</code> (default) denotes that the standard Coulomb potential should be used with no cutoff or reaction-field attenuation</li> <li>A function denotes that the specified function should be used, which may make use of <code>cutoff</code>, <code>switch_width</code>, and/or <code>solvent_dielectric</code> terms</li> </ul> <p>The interaction scaling parameters applied to atoms connected by a few bonds are</p> <ul> <li><code>scale12</code> (default: 0) specifies the scaling applied to 1-2 bonds</li> <li><code>scale13</code> (default: 0) specifies the scaling applied to 1-3 bonds</li> <li><code>scale14</code> (default: 0.833333) specifies the scaling applied to 1-4 bonds</li> <li><code>scale15</code> (default: 1.0) specifies the scaling applied to 1-5 bonds</li> </ul> <p>Currently, no child tags are used because the charge model is specified via different means (currently library charges or BCCs).</p> <p>For potentials where the cutoff determines the potential energy of the system (such as custom expression or reaction field methods), the appropriate <code>cutoff</code> distance must also be specified, and the appropriate <code>switch_width</code> should be set to a numerical value if a switching function is to be used.</p> <p>It is possible to define an Electrostatics section where no potential uses <code>cutoff</code>, <code>switch_width</code>, or <code>solvent_dielectric</code>. In these cases it is strongly recommended that these values be set to <code>none</code> to avoid ambiguity. </p> Electrostatics section tag version Tag attributes and default values Required parameter attributes Optional parameter attributes 0.3 <code>scale12=\"0\"</code>, <code>scale13=\"0\"</code>, <code>scale14=\"0.833333\"</code>, <code>scale15=\"1.0\"</code>, <code>cutoff=\"9.0*angstrom\"</code>, <code>switch_width=\"0*angstrom\"</code>, <code>method=\"PME\"</code> N/A N/A 0.4 <code>scale12=\"0\"</code>, <code>scale13=\"0\"</code>, <code>scale14=\"0.833333\"</code>, <code>scale15=\"1.0\"</code>, <code>cutoff=\"none\"</code>, <code>switch_width=\"none\"</code>, <code>periodic_potential=\"Ewald3D-ConductingBoundary\"</code>, <code>nonperiodic_potential=\"Coulomb\"</code>, <code>exception_potential=\"Coulomb\"</code>, <code>solvent_dielectric=\"none\"</code> N/A N/A"},{"location":"standards/smirnoff/#bonds","title":"<code>&lt;Bonds&gt;</code>","text":"<p>Bond parameters are specified via a <code>&lt;Bonds&gt;...&lt;/Bonds&gt;</code> block, with individual <code>&lt;Bond&gt;</code> tags containing attributes specifying the equilibrium bond length (<code>length</code>) and force constant (<code>k</code>) values for specific bonds. For example:</p> <pre><code>&lt;Bonds version=\"0.3\" potential=\"harmonic\"&gt;\n   &lt;Bond smirks=\"[#6X4:1]-[#6X4:2]\" length=\"1.526*angstrom\" k=\"620.0*kilocalories_per_mole/angstrom**2\"/&gt;\n   &lt;Bond smirks=\"[#6X4:1]-[#1:2]\" length=\"1.090*angstrom\" k=\"680.0*kilocalories_per_mole/angstrom**2\"/&gt;\n   ...\n&lt;/Bonds&gt;\n</code></pre> <p>Currently, only <code>potential=\"harmonic\"</code> is supported, where we utilize the standard harmonic functional form:</p> <pre><code>U(r) = (k/2)*(r-length)^2\n</code></pre> <p>Later revisions will add support for additional potential types and the ability to support arbitrary algebraic functional forms. If the <code>potential</code> attribute is omitted, it defaults to <code>harmonic</code>.</p> <p>Note that AMBER and CHARMM define a modified functional form, such that <code>U(r) = k*(r-length)^2</code>, so that force constants would need to be multiplied by two in order to be used in the SMIRNOFF format.</p> <p>Constrained bonds are handled by a separate <code>&lt;Constraints&gt;</code> tag, which can either specify constraint distances or draw them from equilibrium distances specified in <code>&lt;Bonds&gt;</code>.</p>"},{"location":"standards/smirnoff/#fractional-bond-orders","title":"Fractional bond orders","text":"<p>Fractional bond orders can be used to allow interpolation of bond parameters. For example, these parameters:</p> <pre><code>&lt;Bonds version=\"0.3\" potential=\"harmonic\"&gt;\n    &lt;Bond smirks=\"[#6X3:1]-[#6X3:2]\" k=\"820.0*kilocalories_per_mole/angstrom**2\" length=\"1.45*angstrom\"/&gt;\n    &lt;Bond smirks=\"[#6X3:1]:[#6X3:2]\" k=\"938.0*kilocalories_per_mole/angstrom**2\" length=\"1.40*angstrom\"/&gt;\n    &lt;Bond smirks=\"[#6X3:1]=[#6X3:2]\" k=\"1098.0*kilocalories_per_mole/angstrom**2\" length=\"1.35*angstrom\"/&gt;\n    ...\n</code></pre> <p>can be replaced by a single parameter line by first invoking the <code>fractional_bondorder_method</code> attribute to specify a method for computing the fractional bond order and <code>fractional_bondorder_interpolation</code> for specifying the procedure for interpolating parameters between specified integral bond orders:</p> <pre><code>&lt;Bonds version=\"0.3\" potential=\"harmonic\" fractional_bondorder_method=\"AM1-Wiberg\" fractional_bondorder_interpolation=\"linear\"&gt;\n    &lt;Bond smirks=\"[#6X3:1]!#[#6X3:2]\" k_bondorder1=\"820.0*kilocalories_per_mole/angstrom**2\" k_bondorder2=\"1098*kilocalories_per_mole/angstrom**2\" length_bondorder1=\"1.45*angstrom\" length_bondorder2=\"1.35*angstrom\"/&gt;\n    ...\n</code></pre> <p>This allows specification of force constants and lengths for bond orders 1 and 2, and then interpolation between those based on the partial bond order.</p> <ul> <li><code>fractional_bondorder_method</code> defaults to <code>AM1-Wiberg</code>.</li> <li><code>fractional_bondorder_interpolation</code> defaults to <code>linear</code>, which is the only supported scheme for now.</li> </ul> Bonds section tag version Tag attributes and default values Required parameter attributes Optional parameter attributes 0.3 <code>potential=\"harmonic\"</code>, <code>fractional_bondorder_method=\"none\"</code>, <code>fractional_bondorder_interpolation=\"linear\"</code> <code>smirks</code>, <code>length</code>, <code>k</code> <code>id</code>, <code>parent_id</code> 0.4 <code>potential=\"(k/2)*(r-length)^2\"</code>, <code>fractional_bondorder_method=\"AM1-Wiberg\"</code>, <code>fractional_bondorder_interpolation=\"linear\"</code> <code>smirks</code>, <code>length</code>, <code>k</code> <code>id</code>, <code>parent_id</code>"},{"location":"standards/smirnoff/#angles","title":"<code>&lt;Angles&gt;</code>","text":"<p>Angle parameters are specified via an <code>&lt;Angles&gt;...&lt;/Angles&gt;</code> block, with individual <code>&lt;Angle&gt;</code> tags containing attributes specifying the equilibrium angle (<code>angle</code>) and force constant (<code>k</code>), as in this example:</p> <pre><code>&lt;Angles version=\"0.3\" potential=\"harmonic\"&gt;\n   &lt;Angle smirks=\"[a,A:1]-[#6X4:2]-[a,A:3]\" angle=\"109.50*degree\" k=\"100.0*kilocalories_per_mole/radian**2\"/&gt;\n   &lt;Angle smirks=\"[#1:1]-[#6X4:2]-[#1:3]\" angle=\"109.50*degree\" k=\"70.0*kilocalories_per_mole/radian**2\"/&gt;\n   ...\n&lt;/Angles&gt;\n</code></pre> <p>Currently, only <code>potential=\"harmonic\"</code> is supported, where we utilize the standard harmonic functional form:</p> <pre><code>U(r) = (k/2)*(theta-angle)^2\n</code></pre> <p>Later revisions will add support for additional potential types and the ability to support arbitrary algebraic functional forms. If the <code>potential</code> attribute is omitted, it defaults to <code>harmonic</code>.</p> <p>Note that AMBER and CHARMM define a modified functional form, such that <code>U(r) = k*(theta-angle)^2</code>, so that force constants would need to be multiplied by two in order to be used in the SMIRNOFF format.</p> Angles section tag version Tag attributes and default values Required parameter attributes Optional parameter attributes 0.3 <code>potential=\"harmonic\"</code> <code>smirks</code>, <code>angle</code>, <code>k</code> <code>id</code>, <code>parent_id</code>"},{"location":"standards/smirnoff/#propertorsions","title":"<code>&lt;ProperTorsions&gt;</code>","text":"<p>Proper torsions are specified via a <code>&lt;ProperTorsions&gt;...&lt;/ProperTorsions&gt;</code> block, with individual <code>&lt;Proper&gt;</code> tags containing attributes specifying the periodicity (<code>periodicity#</code>), phase (<code>phase#</code>), and barrier height (<code>k#</code>).</p> <pre><code>&lt;ProperTorsions version=\"0.3\" potential=\"k*(1+cos(periodicity*theta-phase))\"&gt;\n   &lt;Proper smirks=\"[a,A:1]-[#6X4:2]-[#6X4:3]-[a,A:4]\" idivf1=\"9\" periodicity1=\"3\" phase1=\"0.0*degree\" k1=\"1.40*kilocalories_per_mole\"/&gt;\n   &lt;Proper smirks=\"[#6X4:1]-[#6X4:2]-[#8X2:3]-[#6X4:4]\" idivf1=\"1\" periodicity1=\"3\" phase1=\"0.0*degree\" k1=\"0.383*kilocalories_per_mole\" idivf2=\"1\" periodicity2=\"2\" phase2=\"180.0*degree\" k2=\"0.1*kilocalories_per_mole\"/&gt;\n   ...\n&lt;/ProperTorsions&gt;\n</code></pre> <p>Here, child <code>Proper</code> tags specify at least <code>k1</code>, <code>phase1</code>, and <code>periodicity1</code> attributes for the corresponding parameters of the first force term applied to this torsion. However, additional values are allowed in the form <code>k#</code>, <code>phase#</code>, and <code>periodicity#</code>, where all <code>#</code> values must be consecutive (e.g., it is impermissible to specify <code>k1</code> and <code>k3</code> values without a <code>k2</code> value) but <code>#</code> can go as high as necessary.</p> <p>For convenience, an optional attribute specifies a torsion multiplicity by which the barrier height (<code>k#</code>) should be divided (<code>idivf#</code>). The final barrier height is calculated as <code>k#/idivf#</code>. <code>idivf</code> can be assigned an integer value (such as <code>\"1\"</code>), or <code>\"auto\"</code>. If <code>idivf=\"auto\"</code>, the following equation is used to determine the <code>idivf</code> value for a torsion applying to four atoms <code>i-j-k-l</code>, where <code>n_j</code> refers to the degree (i.e. number of bonds) of atom <code>j</code>:</p> <pre><code>idivf = (n_j - 1) * (n_k - 1)\n</code></pre> <p>The default behavior of this <code>idivf</code> can be controlled by the top-level attribute <code>default_idivf</code> (default: <code>\"auto\"</code>) for <code>&lt;ProperTorsions&gt;</code>.</p> <p>For example:</p> <pre><code>&lt;ProperTorsions version=\"0.3\" potential=\"k*(1+cos(periodicity*theta-phase))\" default_idivf=\"auto\"&gt;\n   &lt;Proper smirks=\"[a,A:1]-[#6X4:2]-[#6X4:3]-[a,A:4]\" periodicity1=\"3\" phase1=\"0.0*degree\" k1=\"1.40*kilocalories_per_mole\"/&gt;\n   ...\n&lt;/ProperTorsions&gt;\n</code></pre> <p>Currently, only <code>potential=\"k*(1+cos(periodicity*theta-phase))\"</code> is supported, where we utilize the functional form:</p> <pre><code>U = \\sum_{i=1}^N k_i/idivf_i * (1 + cos(periodicity_i * theta - phase_i))\n</code></pre> <p>Note</p> <p>AMBER defines a modified functional form, such that <code>U = \\sum_{i=1}^N (k_i/2) * (1 + cos(periodicity_i * phi - phase_i))</code>, so that barrier heights would need to be divided by two in order to be used in the SMIRNOFF format (AMBER uses phi in an analogous way to how SMIRNOFF uses theta).</p> <p>If the <code>potential</code> attribute is omitted, it defaults to <code>k*(1+cos(periodicity*theta-phase))</code>.</p> <p>In the potential function, the angle <code>theta</code> is calculated using input vectors defined by the four atoms of the torsion <code>i-j-k-l</code>.</p> <p></p> <p>Where the vector <code>r_ji</code> is defined as the vector from atom <code>j</code> to atom <code>i</code>:</p> <pre><code>r_ji = x_i - x_j\n</code></pre> <p>the angle <code>theta</code> should be calculated using the input vectors <code>r_ji</code>, <code>r_jk</code>, and <code>r_lk</code>. These define the planes <code>u_ijk</code> and <code>u_jkl</code> (see figure below, section A).</p> <p></p> <p>The sign of the angle is determined by comparing the <code>r_ji</code> vector to the <code>u_jkl</code> plane (see figure above, section B). If the <code>r_ji</code> vector has an acute angle to the <code>u_jkl</code> vector, the sign is positive; if the angle is obtuse, the sign is negative (section C in figure above).</p> <p>Pseudocode of the expected implementation is provided below.</p> <pre><code>u_ijk = r_ji x r_jk\nu_jkl = r_jk x r_lk\nangle = acos(u_ijk \u2022 u_jkl)  # returns in domain [0, pi]\n\nrij_to_ujkl = r_ji \u2022 u_jkl\nif rij_to_ujkl &lt; 0:\n    sign = -1\nelse:\n    sign = 1\ntheta = sign * angle\n</code></pre> <p>Note</p> <p>Angle values close to 0 and \u03c0 may be susceptible to precision errors in implementations.</p> <p>The sign of the <code>theta</code> angle is important in cases where the torsion profile is asymmetric, i.e. where the <code>phase</code> is neither 0 nor pi, for example in the case below.</p> <p></p> <p>Note</p> <p>A SMIRKS pattern that can match a particular bonded  quartet in either <code>i-j-k-l</code> or <code>l-k-j-i</code> order is  ambiguous, and the specification cannot guarantee the  match will be performed in any predetermined or  deterministic order, potentially leading to undesired and undefined results.</p>"},{"location":"standards/smirnoff/#fractional-torsion-bond-orders","title":"Fractional torsion bond orders","text":"<p>Fractional torsion bond orders can be used to allow interpolation and extrapolation of torsion parameters. This is similar to the functionality provided by fractional bond orders detailed above. For example, these parameters:</p> <pre><code>&lt;ProperTorsions version=\"0.3\" potential=\"k*(1+cos(periodicity*theta-phase))\" default_idivf=\"auto\"&gt;\n    &lt;Proper smirks=\"[*:1]:[#6X4:2]-[#6X4:3]:[*:4]\" periodicity1=\"2\" phase1=\"0.0 * degree\" k1=\"1.00*kilocalories_per_mole\" idivf1=\"1.0\"/&gt;\n    &lt;Proper smirks=\"[*:1]:[#6X4:2]=[#6X4:3]:[*:4]\" periodicity1=\"2\" phase1=\"0.0 * degree\" k1=\"1.80*kilocalories_per_mole\" idivf1=\"1.0\"/&gt;\n    ...\n</code></pre> <p>can be replaced by a single parameter line by first defining the <code>fractional_bondorder_method</code> header-level attribute to specify a method for computing the fractional bond order and <code>fractional_bondorder_interpolation</code> for specifying the procedure for interpolating parameters between specified integer bond orders:</p> <pre><code>&lt;ProperTorsions version=\"0.3\" potential=\"k*(1+cos(periodicity*theta-phase))\" default_idivf=\"auto\" fractional_bondorder_method=\"AM1-Wiberg\" fractional_bondorder_interpolation=\"linear\"&gt;\n    &lt;Proper smirks=\"[*:1]:[#6X4:2]~[#6X4:3]:[*:4]\" periodicity1=\"2\" phase1=\"0.0 * degree\" k1_bondorder1=\"1.00*kilocalories_per_mole\" k1_bondorder2=\"1.80*kilocalories_per_mole\" idivf1=\"1.0\"/&gt;\n    ...\n</code></pre> <p>This allows specification of the barrier height for e.g. bond orders 1 and 2 (single and double bonds), and then interpolation between those based on the partial/fractional bond order. Note that in actual usage partial/fractional bond order may never be exactly 1 or 2, or perhaps even near 2; these values only serve to define the slope of the line used for interpolation. In the example above, we replaced the two proper torsion terms (one single central bond (<code>-</code>) and one double central bond (<code>=</code>) with a single term giving the barrier heights for bond order 1 and 2. If there are cases where the fractional bond order is 1.5, this can correspond to e.g. an aromatic bond. When barrier heights for more than two integer bond orders are specified, (say, 1, 2, and 3), the interpolation lines are drawn between successive points as a piecewiese linear function.</p> <p>Cases in which the fractional bond order for the central bond is outside of the bond orders specified (e.g. 1 and 2 above), the barrier height <code>k#</code> is extrapolated using the same slope of the line used for interpolation. This works even when barrier heights for more than two integer bond orders are specified (say, 1, 2, and 3), in which case the piecewise linear extrapolation beyond the bounds uses the slope of the line defined by the nearest two bond orders. In other words, a fractional bond order of 3.2 would yield an interpolated <code>k#</code> value determined by the interpolation line between <code>k#_bondorder2</code> and <code>k#_bondorder3</code>. A fractional bond order of .9 would yield an interpolated <code>k#</code> value determined by the interpolation line between <code>k#_bondorder1</code> and <code>k#_bondorder2</code>.</p> <p>Some key usage points:</p> <ul> <li><code>fractional_bondorder_method</code> defaults to <code>AM1-Wiberg</code>.</li> <li><code>fractional_bondorder_interpolation</code> defaults to <code>linear</code>, which is the only supported scheme for now.</li> </ul> ProperTorsions section tag version Tag attributes and default values Required parameter attributes Optional parameter attributes 0.3 <code>potential=\"k*(1+cos(periodicity*theta-phase))\"</code>, <code>default_idivf=\"auto\"</code> <code>smirks</code>, <code>k</code>, <code>phase</code>, <code>periodicity</code> <code>idivf</code>, <code>id</code>, <code>parent_id</code> 0.4 <code>potential=\"k*(1+cos(periodicity*theta-phase))\"</code>, <code>default_idivf=\"auto\"</code>, <code>fractional_bondorder_method=\"AM1-Wiberg\"</code>, <code>fractional_bondorder_interpolation=\"linear\"</code> <code>smirks</code>, (<code>k</code> OR <code>k_bondorder</code>), <code>phase</code>, <code>periodicity</code> <code>idivf</code>, <code>id</code>, <code>parent_id</code>"},{"location":"standards/smirnoff/#impropertorsions","title":"<code>&lt;ImproperTorsions&gt;</code>","text":"<p>Improper torsions are specified via an <code>&lt;ImproperTorsions&gt;...&lt;/ImproperTorsions&gt;</code> block, with individual <code>&lt;Improper&gt;</code> tags containing attributes that specify the same properties as <code>&lt;ProperTorsions&gt;</code>:</p> <pre><code>&lt;ImproperTorsions version=\"0.3\" potential=\"k*(1+cos(periodicity*theta-phase))\"&gt;\n    &lt;Improper smirks=\"[*:1]~[#6X3:2](=[#7X2,#7X3+1:3])~[#7:4]\" k1=\"10.5*kilocalories_per_mole\" periodicity1=\"2\" phase1=\"180.*degree\"/&gt;\n    ...\n&lt;/ImproperTorsions&gt;\n</code></pre> <p>Currently, only <code>potential=\"k*(1+cos(periodicity*theta-phase))\"</code> is supported, where we utilize the functional form of CHARMM:</p> <pre><code>U = \\sum_{i=1}^N k_i * (1 + cos(periodicity_i * phi - phase_i))\n</code></pre> <p>Note</p> <p>AMBER defines a modified functional form, such that <code>U = \\sum_{i=1}^N (k_i/2) * (1 + cos(periodicity_i * phi - phase_i))</code>, so that barrier heights would need to be divided by two in order to be used in the SMIRNOFF format.</p> <p>If the <code>potential</code> attribute is omitted, it defaults to <code>\"k*(1+cos(periodicity*theta-phase))\"</code>.</p> <p>The improper torsion energy is computed as the average over all three impropers (all with the same handedness) in a trefoil. This avoids the dependence on arbitrary atom orderings that occur in more traditional typing engines such as those used in AMBER. The second atom in an improper (in the example above, the trivalent carbon) is the central atom in the trefoil.</p> ImproperTorsions section tag version Tag attributes and default values Required parameter attributes Optional parameter attributes 0.3 <code>potential=\"k*(1+cos(periodicity*theta-phase))\"</code>, <code>default_idivf=\"auto\"</code> <code>smirks</code>, <code>k</code>, <code>phase</code>, <code>periodicity</code> <code>idivf</code>, <code>id</code>, <code>parent_id</code>"},{"location":"standards/smirnoff/#gbsa","title":"<code>&lt;GBSA&gt;</code>","text":"<p>Warning</p> <p>The current release of ParmEd can not transfer GBSA models produced by the OpenFF Toolkit to other simulation packages. These GBSA forces are currently only computable using OpenMM.</p> <p>Generalized-Born surface area (GBSA) implicit solvent parameters are optionally specified via a <code>&lt;GBSA&gt;...&lt;/GBSA&gt;</code> using <code>&lt;Atom&gt;</code> tags with GBSA model specific attributes:</p> <pre><code>&lt;GBSA version=\"0.3\" gb_model=\"OBC1\" solvent_dielectric=\"78.5\" solute_dielectric=\"1\" sa_model=\"ACE\" surface_area_penalty=\"5.4*calories/mole/angstroms**2\" solvent_radius=\"1.4*angstroms\"&gt;\n  &lt;Atom smirks=\"[*:1]\" radius=\"0.15*nanometer\" scale=\"0.8\"/&gt;\n  &lt;Atom smirks=\"[#1:1]\" radius=\"0.12*nanometer\" scale=\"0.85\"/&gt;\n  &lt;Atom smirks=\"[#1:1]~[#7]\" radius=\"0.13*nanometer\" scale=\"0.85\"/&gt;\n  &lt;Atom smirks=\"[#6:1]\" radius=\"0.17*nanometer\" scale=\"0.72\"/&gt;\n  &lt;Atom smirks=\"[#7:1]\" radius=\"0.155*nanometer\" scale=\"0.79\"/&gt;\n  &lt;Atom smirks=\"[#8:1]\" radius=\"0.15*nanometer\" scale=\"0.85\"/&gt;\n  &lt;Atom smirks=\"[#9:1]\" radius=\"0.15*nanometer\" scale=\"0.88\"/&gt;\n  &lt;Atom smirks=\"[#14:1]\" radius=\"0.21*nanometer\" scale=\"0.8\"/&gt;\n  &lt;Atom smirks=\"[#15:1]\" radius=\"0.185*nanometer\" scale=\"0.86\"/&gt;\n  &lt;Atom smirks=\"[#16:1]\" radius=\"0.18*nanometer\" scale=\"0.96\"/&gt;\n  &lt;Atom smirks=\"[#17:1]\" radius=\"0.17*nanometer\" scale=\"0.8\"/&gt;\n&lt;/GBSA&gt;\n</code></pre>"},{"location":"standards/smirnoff/#supported-generalized-born-gb-models","title":"Supported Generalized Born (GB) models","text":"<p>In the <code>&lt;GBSA&gt;</code> tag, <code>gb_model</code> selects which GB model is used. Currently, this can be selected from a subset of the GBSA models available in OpenMM:</p> <ul> <li><code>HCT</code> : Hawkins-Cramer-Truhlar (corresponding to <code>igb=1</code> in AMBER): requires parameters <code>[radius, scale]</code></li> <li><code>OBC1</code> : Onufriev-Bashford-Case using the GB(OBC)I parameters (corresponding to <code>igb=2</code> in AMBER): requires parameters <code>[radius, scale]</code></li> <li><code>OBC2</code> : Onufriev-Bashford-Case using the GB(OBC)II parameters (corresponding to <code>igb=5</code> in AMBER): requires parameters <code>[radius, scale]</code></li> </ul> <p>If the <code>gb_model</code> attribute is omitted, it defaults to <code>OBC1</code>.</p> <p>The attributes <code>solvent_dielectric</code> and <code>solute_dielectric</code> specify solvent and solute dielectric constants used by the GB model. In this example, <code>radius</code> and <code>scale</code> are per-particle parameters of the <code>OBC1</code> GB model supported by OpenMM.</p>"},{"location":"standards/smirnoff/#surface-area-sa-penalty-model","title":"Surface area (SA) penalty model","text":"<p>The <code>sa_model</code> attribute specifies the solvent-accessible surface area model (\"SA\" part of GBSA) if one should be included; if omitted, no SA term is included.</p> <p>Currently, only the analytical continuum electrostatics (ACE) model designated <code>ACE</code>, can be specified, but there are plans to add more models in the future, such as the Gaussian solvation energy component of EEF1. If <code>sa_model</code> is not specified, it defaults to <code>ACE</code>.</p> <p>The <code>ACE</code> model permits two additional parameters to be specified:</p> <ul> <li>The <code>surface_area_penalty</code> attribute specifies the surface area penalty for the <code>ACE</code> model. (Default: <code>5.4 calories/mole/angstroms**2</code>)</li> <li>The <code>solvent_radius</code> attribute specifies the solvent radius. (Default: <code>1.4 angstroms</code>)</li> </ul> GBSA section tag version Tag attributes and default values Required parameter attributes Optional parameter attributes 0.3 <code>gb_model=\"OBC1\"</code>, <code>solvent_dielectric=\"78.5\"</code>, <code>solute_dielectric=\"1\"</code>, <code>sa_model=\"ACE\"</code>, <code>surface_area_penalty=\"5.4*calories/mole/angstrom**2\"</code>, <code>solvent_radius=\"1.4*angstrom\"</code> <code>smirks</code>, <code>radius</code>, <code>scale</code> <code>id</code>, <code>parent_id</code>"},{"location":"standards/smirnoff/#constraints","title":"<code>&lt;Constraints&gt;</code>","text":"<p>Bond length or angle constraints can be specified through a <code>&lt;Constraints&gt;</code> block, which can constrain bonds to their equilibrium lengths or specify an interatomic constraint distance. Two atoms must be tagged in the <code>smirks</code> attribute of each <code>&lt;Constraint&gt;</code> record.</p> <p>To constrain the separation between two atoms to their equilibrium bond length, it is critical that a <code>&lt;Bonds&gt;</code> record be specified for those atoms:</p> <pre><code>&lt;Constraints version=\"0.3\" &gt;\n  &lt;!-- constrain all bonds to hydrogen to their equilibrium bond length --&gt;\n  &lt;Constraint smirks=\"[#1:1]-[*:2]\" /&gt;\n&lt;/Constraints&gt;\n</code></pre> <p>Note that the two atoms must be bonded in the specified <code>Topology</code> for the equilibrium bond length to be used.</p> <p>To specify the constraint distance, or constrain two atoms that are not directly bonded (such as the hydrogens in rigid water models), specify the <code>distance</code> attribute (and optional <code>distance_unit</code> attribute for the <code>&lt;Constraints&gt;</code> tag):</p> <pre><code>&lt;Constraints version=\"0.3\"&gt;\n  &lt;!-- constrain water O-H bond to equilibrium bond length (overrides earlier constraint) --&gt;\n  &lt;Constraint smirks=\"[#1:1]-[#8X2H2:2]-[#1]\" distance=\"0.9572*angstrom\"/&gt;\n  &lt;!-- constrain water H...H, calculating equilibrium length from H-O-H equilibrium angle and H-O equilibrium bond lengths --&gt;\n  &lt;Constraint smirks=\"[#1:1]-[#8X2H2]-[#1:2]\" distance=\"1.8532*angstrom\"/&gt;\n&lt;/Constraints&gt;\n</code></pre> <p>If a constraint is applied across a bond between two atoms, then the length of that bond will be constrained to:</p> <ul> <li>the value of the <code>distance</code> attribute of the <code>&lt;Constraint&gt;</code> parameter if one is specified, otherwise</li> <li>the value of the <code>length</code> attribute of the <code>&lt;Bond&gt;</code> parameter that is matched by that bond</li> </ul> <p>If the <code>&lt;Constraint/&gt;</code> parameter does not specify a distance and is applied to two atoms that either aren't bonded or which do not have an associated <code>&lt;Bond/&gt;</code> parameter, an exception should be raised.</p> <p>Typical molecular simulation practice is to constrain all bonds to hydrogen to their equilibrium bond lengths and enforce rigid TIP3P geometry on water molecules:</p> <pre><code>&lt;Constraints version=\"0.3\"&gt;\n  &lt;!-- constrain all bonds to hydrogen to their equilibrium bond length --&gt;\n  &lt;Constraint smirks=\"[#1:1]-[*:2]\" /&gt;\n  &lt;!-- TIP3P rigid water --&gt;\n  &lt;Constraint smirks=\"[#1:1]-[#8X2H2:2]-[#1]\" distance=\"0.9572*angstrom\"/&gt;\n  &lt;Constraint smirks=\"[#1:1]-[#8X2H2]-[#1:2]\" distance=\"1.8532*angstrom\"/&gt;\n&lt;/Constraints&gt;\n</code></pre> Constraint section tag version Required tag attributes and default values Required parameter attributes Optional parameter attributes 0.3 <code>smirks</code> <code>distance</code>"},{"location":"standards/smirnoff/#advanced-features","title":"Advanced features","text":"<p>Standard usage is expected to rely primarily on the features documented above and potentially new features. However, some advanced features will also be supported.</p>"},{"location":"standards/smirnoff/#virtualsites-virtual-sites-for-off-atom-charges","title":"<code>&lt;VirtualSites&gt;</code>: Virtual sites for off-atom charges","text":"<p>We will implement experimental support for placement of off-atom (off-center) charges in a variety of contexts which may be chemically important in order to allow easy exploration of when these will be warranted. We will support the following different types or geometries of off-center charges (as diagrammed below):</p> <ul> <li><code>BondCharge</code>: This supports placement of a virtual site <code>S</code> along a vector between two specified atoms, e.g. to allow for a sigma hole for halogens or similar contexts. With positive values of the distance, the virtual site lies outside the first indexed atom (green in this image).</li> </ul> <p></p> <ul> <li><code>MonovalentLonePair</code>: This is originally intended for situations like a carbonyl, and allows placement of a virtual site <code>S</code> at a specified distance <code>d</code>, <code>inPlaneAngle</code> (theta 1 in the diagram), and <code>outOfPlaneAngle</code> (theta 2 in the diagram) relative to a central atom and two connected atoms.</li> </ul> <p></p> <ul> <li><code>DivalentLonePair</code>: This is suitable for cases like four-point and five-point water models as well as pyrimidine; a charge site <code>S</code> lies a specified distance <code>d</code> from the central atom among three atoms (blue) along the bisector of the angle between the atoms (if <code>outOfPlaneAngle</code> is zero) or out of the plane by the specified angle (if <code>outOfPlaneAngle</code> is nonzero) with its projection along the bisector. For positive values of the distance <code>d</code> the virtual site lies outside the 2-1-3 angle and for negative values it lies inside.</li> </ul> <p></p> <ul> <li><code>TrivalentLonePair</code>: This is suitable for planar or tetrahedral nitrogen lone pairs; a charge site <code>S</code> lies above  the central atom (e.g. nitrogen, blue) a distance <code>d</code> along the vector perpendicular to the plane of the three connected atoms (2,3,4). With positive values of <code>d</code> the site lies above the nitrogen and with negative values it lies below the nitrogen.</li> </ul> <p></p> <p>Each virtual site receives charge which is transferred from the desired atoms specified in the SMIRKS pattern via a <code>charge_increment#</code> parameter, e.g., if <code>charge_increment1=0.1*elementary_charge</code> then the virtual site will receive a charge of -0.1 and the atom labeled <code>1</code> will have its charge adjusted upwards by 0.1. N may index any indexed atom. Additionally, each virtual site can bear Lennard-Jones parameters, specified by <code>sigma</code> and <code>epsilon</code> or <code>rmin_half</code> and <code>epsilon</code>. If unspecified these default to zero.</p> <p>Interactions between a virtual site and the other atoms / virtual sites in the molecule are controlled by the <code>exclusion_policy</code> parameter that can take values of:</p> <ul> <li><code>parents</code> - virtual site particles should exclude non-bonded interactions with, or scale their interactions with, the    same particles that the main 'parent atom' that they are attached to does. Which atom is the 'parent atom' depends on    the type of virtual site: for <code>BondCharge</code>, <code>MonovalentLonePair</code>, <code>DivalentLonePair</code>, and <code>TrivalentLonePair</code> types,    it is the atom labelled <code>:1</code> in the SMIRKS pattern.</li> </ul> <p>As an example, if the parent atom is separated by two bonds from another atom i.e a 1-3 pair, the virtual sites'   interaction with that other atom should also be treated as a 1-3 pair. Similarly, if the parent atom is separated by    three bonds from another atom i.e a 1-4 pair, the virtual sites' interaction with that other atom should also be    treated as a 1-4 pair and the interaction should be scaled by the appropriate <code>scale14</code> factor. </p> <p>In the SMIRNOFF format, these are encoded as:</p> <pre><code>&lt;VirtualSites version=\"0.3\" exclusion_policy=\"parents\"&gt;\n  &lt;!-- sigma hole for halogens: \"distance\" denotes distance along the 2-&gt;1 bond vector, measured from atom 2 --&gt;\n  &lt;!-- Specify that 0.2 charge from atom 1 and 0.1 charge units from atom 2 are to be moved to the virtual site, and a small Lennard-Jones site is to be added (sigma=0.1*angstroms, epsilon=0.05*kcal/mol) --&gt;\n  &lt;VirtualSite type=\"BondCharge\" smirks=\"[Cl:1]-[C:2]\" distance=\"0.30*angstrom\" charge_increment1=\"-0.2*elementary_charge\" charge_increment2=\"-0.1*elementary_charge\" sigma=\"0.1*angstrom\" epsilon=\"0.05*kilocalories_per_mole\"/&gt;\n  &lt;!-- Charge increments can extend out to as many atoms as are labeled, e.g. with a third atom: --&gt;\n  &lt;VirtualSite type=\"BondCharge\" smirks=\"[Cl:1]-[C:2]~[*:3]\" distance=\"0.30*angstrom\" charge_increment1=\"-0.1*elementary_charge\" charge_increment2=\"-0.1*elementary_charge\" charge_increment3=\"-0.05*elementary_charge\" sigma=\"0.1*angstrom\" epsilon=\"0.05*kilocalories_per_mole\"/&gt;\n  &lt;!-- monovalent lone pairs: carbonyl --&gt;\n  &lt;!-- X denotes the charge site, and P denotes the projection of the charge site into the plane of 1 and 2. --&gt;\n  &lt;!-- inPlaneAngle is angle point P makes with 1 and 2, i.e. P-1-2 --&gt;\n  &lt;!-- outOfPlaneAngle is angle charge site (X) makes out of the plane of 2-1-3 (and P) measured from 1 --&gt;\n  &lt;!-- Since unspecified here, sigma and epsilon for the virtual site default to zero --&gt;\n  &lt;VirtualSite type=\"MonovalentLonePair\" smirks=\"[O:1]=[C:2]-[*:3]\" distance=\"0.30*angstrom\" outOfPlaneAngle=\"0*degree\" inPlaneAngle=\"120*degree\" charge_increment1=\"0.2*elementary_charge\" charge_increment2=\"0.2*elementary_charge\" charge_increment3=\"0.2*elementary_charge\"/&gt;\n  &lt;!-- divalent lone pair: pyrimidine, TIP4P, TIP5P --&gt;\n  &lt;!-- The atoms 2-1-3 define the X-Y plane, with Z perpendicular. If outOfPlaneAngle is 0, the charge site is a specified distance along the in-plane vector which bisects the angle left by taking 360 degrees minus angle(2,1,3). If outOfPlaneAngle is nonzero, the charge sites lie out of the plane by the specified angle (at the specified distance) and their in-plane projection lines along the angle's bisector. --&gt;\n  &lt;VirtualSite type=\"DivalentLonePair\" smirks=\"[*:2]~[#7X2:1]~[*:3]\" distance=\"0.30*angstrom\" outOfPlaneAngle=\"0.0*degree\" charge_increment1=\"0.1*elementary_charge\" charge_increment2=\"0.2*elementary_charge\" charge_increment3=\"0.2*elementary_charge\"/&gt;\n  &lt;!-- trivalent nitrogen lone pair --&gt;\n  &lt;!-- charge sites lie above and below the nitrogen at specified distances from the nitrogen, along the vector perpendicular to the plane of (2,3,4) that passes through the nitrogen. If the nitrogen is co-planar with the connected atom, charge sites are simply above and below the plane --&gt;\n  &lt;!-- Positive and negative values refer to above or below the nitrogen as measured relative to the plane of (2,3,4), i.e. below the nitrogen means nearer the 2,3,4 plane unless they are co-planar --&gt;\n  &lt;!-- To ensure that the second site does not overwrite the first, specify a unique name for each. --&gt;\n  &lt;VirtualSite type=\"TrivalentLonePair\" smirks=\"[*:2]~[#7X3:1](~[*:4])~[*:3]\" name=\"A\" distance=\"0.30*angstrom\" charge_increment1=\"0.1*elementary_charge\" charge_increment2=\"0.2*elementary_charge\" charge_increment3=\"0.2*elementary_charge\" charge_increment4=\"0.2*elementary_charge\"/&gt;\n  &lt;VirtualSite type=\"TrivalentLonePair\" smirks=\"[*:2]~[#7X3:1](~[*:4])~[*:3]\" name=\"B\" distance=\"-0.30*angstrom\" charge_increment1=\"0.1*elementary_charge\" charge_increment2=\"0.2*elementary_charge\" charge_increment3=\"0.2*elementary_charge\" charge_increment4=\"0.2*elementary_charge\"/&gt;\n&lt;/VirtualSites&gt;\n</code></pre> VirtualSites section tag version Tag attributes and default values Required parameter attributes and default values Optional parameter attributes 0.3 <code>exclusion_policy=\"parents\"</code> <code>smirks</code>, <code>type</code>, <code>distance</code>, <code>charge_increment</code> (indexed), <code>inPlaneAngle</code> IF <code>type=\"MonovalentLonePair\"</code>, <code>outOfPlaneAngle</code> IF <code>type=\"MonovalentLonePair\"</code> OR <code>type=\"DivalentLonePair\"</code>,  <code>sigma=0.*angstrom</code>, <code>epsilon=0.*kilocalories_per_mole</code>, <code>name=\"EP\"</code>, <code>match=\"all_permutations\"</code> IF <code>type=\"BondCharge\"</code> OR <code>type=\"MonovalentLonePair\"</code> OR <code>type=\"DivalentLonePair\"</code>, <code>match=\"once\"</code> IF <code>type=\"TrivalentLonePair\"</code> N/A"},{"location":"standards/smirnoff/#aromaticity-models","title":"Aromaticity models","text":"<p>Before conducting SMIRKS substructure searches, molecules are prepared using one of the supported aromaticity models, which must be specified with the <code>aromaticity_model</code> attribute. The only aromaticity model currently widely supported (by both the OpenEye toolkit and RDKit) is the <code>OEAroModel_MDL</code> model.</p>"},{"location":"standards/smirnoff/#additional-plans-for-future-development","title":"Additional plans for future development","text":"<p>See the OpenFF toolkit GitHub issue tracker to propose changes to this specification, or read through proposed changes currently being discussed.</p>"},{"location":"standards/smirnoff/#the-openff-toolkit-reference-implementation","title":"The OpenFF Toolkit reference implementation","text":"<p>A Python reference implementation of a parameterization engine implementing the SMIRNOFF force field specification can be found online. This implementation can use either the free-for-academics (but commercially supported) OpenEye toolkit or the free and open source RDKit cheminformatics toolkit. See the installation instructions for information on how to install this implementation and its dependencies.</p>"},{"location":"standards/smirnoff/#examples","title":"Examples","text":"<p>A relatively extensive set of examples is made available on the OpenFF Toolkit repository under examples/.</p>"},{"location":"standards/smirnoff/#parameterizing-a-system","title":"Parameterizing a system","text":"<p>Consider parameterizing a simple system containing a the drug imatinib.</p> <pre><code># Create a molecule from a mol2 file\nfrom openff.toolkit.topology import Molecule\nmolecule = Molecule.from_file('imatinib.mol2')\n\n# Create a Topology specifying the system to be parameterized containing just the molecule\ntopology = molecule.to_topology()\n\n# Load the first release of the \"Parsley\" force field\nfrom openff.toolkit.typing.engines.smirnoff import ForceField\nforcefield = ForceField('openff-1.0.0.offxml')\n\n# Create an OpenMM System from the topology\nsystem = forcefield.create_openmm_system(topology)\n</code></pre> <p>See <code>examples/SMIRNOFF_simulation/</code> for an extension of this example illustrating how to simulate this molecule in the gas phase.</p> <p>The <code>topology</code> object provided to <code>create_openmm_system()</code> can contain any number of molecules of different types, including biopolymers, ions, buffer molecules, or solvent molecules. The OpenFF toolkit provides a number of convenient methods for importing or constructing topologies given PDB files, Sybyl mol2 files, SDF files, SMILES strings, and IUPAC names; see the toolkit documentation for more information. Notably, this <code>topology</code> object differs from those found in OpenMM or MDTraj in that it contains information on the chemical identity of the molecules constituting the system, rather than this atomic elements and covalent connectivity; this additional chemical information is required for the direct chemical perception features of SMIRNOFF typing.</p>"},{"location":"standards/smirnoff/#using-smirnoff-small-molecule-force-fields-with-traditional-biopolymer-force-fields","title":"Using SMIRNOFF small molecule force fields with traditional biopolymer force fields","text":"<p>While SMIRNOFF format force fields can cover a wide range of biological systems, our initial focus is on gneral small molecule force fields, meaning that users may have considerable interest in combining SMIRNOFF small molecule parameters to systems in combination with traditional biopolymer parameters from conventional force fields, such as the AMBER family of protein/nucleic acid force fields. Thus, we provide an example of setting up a mixed protein-ligand system in examples/using_smirnoff_with_amber_protein_forcefield, where an AMBER family force field is used for a protein and the original \"Parsley\" force field (<code>openff-1.0.0</code>) for a small molecule.</p>"},{"location":"standards/smirnoff/#the-optional-id-and-parent_id-attributes-and-other-xml-attributes","title":"The optional <code>id</code> and <code>parent_id</code> attributes and other XML attributes","text":"<p>In general, additional optional XML attributes can be specified and will be ignored unless they are specifically handled by the parser (and specified in this document).</p> <p>One attribute we have found helpful in parameter file development is the <code>id</code> attribute for a specific parameter line, and we recommend that SMIRNOFF force fields utilize this as effectively a parameter serial number, such as in:</p> <pre><code> &lt;Bond smirks=\"[#6X3:1]-[#6X3:2]\" id=\"b5\" k=\"820.0*kilocalorie_per_mole/angstrom**2\" length=\"1.45*angstrom\"/&gt;\n</code></pre> <p>Some functionality in <code>ForceField</code>, such as <code>ForceField.label_molecules</code>, looks for the <code>id</code> attribute. Without this attribute, there is no way to uniquely identify a specific parameter line in the XML file without referring to it by its smirks string, and since some smirks strings can become long and relatively unwieldy (especially for torsions) this provides a more human- and search-friendly way of referring to specific sets of parameters.</p> <p>The <code>parent_id</code> attribute is also frequently used to denote parameters from which the current parameter is derived in some manner.</p>"},{"location":"standards/smirnoff/#a-remark-about-parameter-availability","title":"A remark about parameter availability","text":"<p><code>ForceField</code> will currently raise an exception if any parameters are missing where expected for your system---i.e. if a bond is assigned no parameters, an exception will be raised. However, use of generic parameters (i.e. <code>[*:1]~[*:2]</code> for a bond) in your <code>.offxml</code> will result in parameters being assigned everywhere, bypassing this exception. We recommend generics be used sparingly unless it is your intention to provide true universal generic parameters.</p>"},{"location":"standards/smirnoff/#version-history","title":"Version history","text":""},{"location":"standards/smirnoff/#03","title":"0.3","text":"<p>This is a backwards-incompatible update to the SMIRNOFF 0.2 draft specification.  However, the OpenFF Toolkit version accompanying this update is capable of converting 0.1 spec SMIRNOFF data to 0.2 spec, and subsequently 0.2 spec to 0.3 spec. The 0.1-to-0.2 spec conversion makes a number of assumptions about settings such as long-range nonbonded handling. Warnings are printed about each assumption that is made during this spec conversion.  No mechanism to convert backwards in spec is provided.</p> <p>Key changes in this version of the spec are:</p> <ul> <li>Section headers now contain individual versions, instead of relying on the <code>&lt;SMIRNOFF&gt;</code>-level tag.</li> <li>Section headers no longer contain <code>X_unit</code> attributes.</li> <li>All physical quantities are now written as expressions containing the appropriate units.</li> <li>The default potential for <code>&lt;ProperTorsions&gt;</code> and <code>&lt;ImproperTorsions&gt;</code> was changed from <code>charmm</code> to <code>k*(1+cos(periodicity*theta-phase))</code>, as CHARMM interprets torsion terms with perioidicity 0 as having a quadratic potential, while the OpenFF Toolkit would interpret a zero periodicity literally.</li> </ul>"},{"location":"standards/smirnoff/#02","title":"0.2","text":"<p>This is a backwards-incompatible overhaul of the SMIRNOFF 0.1 draft specification along with a refactor of the reference <code>ForceField</code> class:</p> <ul> <li>Aromaticity model now defaults to <code>OEAroModel_MDL</code>, and aromaticity model names drop OpenEye-specific prefixes</li> <li>Top-level tags are now required to specify units for any unit-bearing quantities to avoid the potential for mistakes from implied units.</li> <li>Potential energy component definitions were renamed to be more general:<ul> <li><code>&lt;NonbondedForce&gt;</code> was renamed to <code>&lt;vdW&gt;</code></li> <li><code>&lt;HarmonicBondForce&gt;</code> was renamed to <code>&lt;Bonds&gt;</code></li> <li><code>&lt;HarmonicAngleForce&gt;</code> was renamed to <code>&lt;Angles&gt;</code></li> <li><code>&lt;BondChargeCorrections&gt;</code> was renamed to <code>&lt;ChargeIncrementModel&gt;</code> and generalized to accommodate an arbitrary number of tagged atoms</li> <li><code>&lt;GBSAForce&gt;</code> was renamed to <code>&lt;GBSA&gt;</code> </li> </ul> </li> <li><code>&lt;PeriodicTorsionForce&gt;</code> was split into <code>&lt;ProperTorsions&gt;</code> and <code>&lt;ImproperTorsions&gt;</code></li> <li><code>&lt;vdW&gt;</code> now specifies 1-2, 1-3, 1-4, and 1-5 scaling factors via <code>scale12</code> (default: 0), <code>scale13</code> (default: 0), <code>scale14</code> (default: 0.5), and <code>scale15</code> (default 1.0) attributes. It also specifies the long-range vdW method to use, currently supporting <code>cutoff</code> (default) and <code>PME</code>. Coulomb scaling parameters have been removed from <code>StericsForce</code>.</li> <li>Added the <code>&lt;Electrostatics&gt;</code> tag to separately specify 1-2, 1-3, 1-4, and 1-5 scaling factors for electrostatics, as well as the method used to compute electrostatics (<code>PME</code>, <code>reaction-field</code>, <code>Coulomb</code>) since this has a huge effect on the energetics of the system.</li> <li>Made it clear that <code>&lt;Constraint&gt;</code> entries do not have to be between bonded atoms.</li> <li><code>&lt;VirtualSites&gt;</code> has been added, and the specification of charge increments harmonized with <code>&lt;ChargeIncrementModel&gt;</code></li> <li>The <code>potential</code> attribute was added to most forces to allow flexibility in extending forces to additional functional forms (or algebraic expressions) in the future. <code>potential</code> defaults to the current recommended scheme if omitted.</li> <li><code>&lt;GBSA&gt;</code> now has defaults specified for <code>gb_method</code> and <code>sa_method</code></li> <li>Changes to how fractional bond orders are handled:<ul> <li>Use of fractional bond order is now are specified at the force tag level, rather than the root level</li> <li>The fractional bond order method is specified via the <code>fractional_bondorder_method</code> attribute</li> <li>The fractional bond order interpolation scheme is specified via the <code>fractional_bondorder_interpolation</code></li> </ul> </li> <li>Section heading names were cleaned up.</li> <li>Example was updated to reflect use of the new <code>openff.toolkit.topology.Topology</code> class</li> <li>Eliminated \"Requirements\" section, since it specified requirements for the software, rather than described an aspect of the SMIRNOFF specification</li> <li>Fractional bond orders are described in <code>&lt;Bonds&gt;</code>, since they currently only apply to this term.</li> </ul>"},{"location":"standards/smirnoff/#01","title":"0.1","text":"<p>Initial draft specification.</p>"}]}